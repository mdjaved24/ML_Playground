{
    "sourceFile": "backend_app/models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1752558720474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752558729675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     target_column = models.CharField(max_length=250)\r\n     features = JSONField()\r\n     feature_types = models.JSONField(default=dict)\r\n     categorical_values = models.JSONField(default=dict)\r\n-    training_time = models.DecimalField(max_digits=4,decimal_places=2)\r\n+    training_time = models.DecimalField(max_digits=5,decimal_places=2)\r\n     encoder = models.CharField(max_length=50)\r\n     scaler = models.CharField(max_length=50)\r\n     test_size = models.FloatField(default=0.2)\r\n     random_state = models.IntegerField(default=4)\r\n"
                },
                {
                    "date": 1752558740419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     target_column = models.CharField(max_length=250)\r\n     features = JSONField()\r\n     feature_types = models.JSONField(default=dict)\r\n     categorical_values = models.JSONField(default=dict)\r\n-    training_time = models.DecimalField(max_digits=5,decimal_places=2)\r\n+    training_time = models.DecimalField(max_digits=5,decimal_places=2, default=0)\r\n     encoder = models.CharField(max_length=50)\r\n     scaler = models.CharField(max_length=50)\r\n     test_size = models.FloatField(default=0.2)\r\n     random_state = models.IntegerField(default=4)\r\n"
                }
            ],
            "date": 1752558720474,
            "name": "Commit-0",
            "content": "from django.db import models\r\nfrom django.db.models import JSONField\r\n\r\nfrom django.contrib.auth.models import User\r\n\r\n# Create your models here.\r\n\r\nclass SecretQuestion(models.Model):\r\n    question = models.CharField(max_length=255, unique=True)\r\n\r\n    def __str__(self):\r\n        return self.question\r\n\r\nclass UserSecretAnswer(models.Model):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    question = models.ForeignKey(SecretQuestion, on_delete=models.CASCADE)\r\n    answer = models.CharField(max_length=255)\r\n    \r\n    class Meta:\r\n        unique_together = ('user', 'question')\r\n\r\n    def __str__(self):\r\n        return f\"{self.user.username}'s answer to {self.question.question}\"\r\n    \r\n\r\n#------------------------------Application-----------------------#\r\nclass UploadedDataset(models.Model):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    name = models.CharField(max_length=250)\r\n    dataset = models.FileField(upload_to='uploads/')\r\n    dataset_hash = models.CharField(max_length=64, unique=True)\r\n    uploaded_at = models.DateTimeField(auto_now_add=True)\r\n\r\n    def __str__(self):\r\n        return self.name+\" | \"+self.user.username\r\n\r\n\r\nclass ModelConfig(models.Model):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    dataset = models.ForeignKey(UploadedDataset, on_delete=models.CASCADE)\r\n    target_column = models.CharField(max_length=250)\r\n    features = JSONField()\r\n    feature_types = models.JSONField(default=dict)\r\n    categorical_values = models.JSONField(default=dict)\r\n    training_time = models.DecimalField(max_digits=4,decimal_places=2)\r\n    encoder = models.CharField(max_length=50)\r\n    scaler = models.CharField(max_length=50)\r\n    test_size = models.FloatField(default=0.2)\r\n    random_state = models.IntegerField(default=4)\r\n    stratify = models.BooleanField(default=False)\r\n    model_type = models.CharField(max_length=250)\r\n    parameters = JSONField()\r\n    accuracy = JSONField()  \r\n    problem_type = models.CharField(max_length=100)\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n\r\n    def __str__(self):\r\n        return self.dataset.name+\" | \"+self.user.username\r\n\r\n\r\n\r\nclass SavedModel(models.Model):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    dataset = models.ForeignKey(UploadedDataset, on_delete=models.CASCADE)\r\n    name = models.CharField(max_length=100, default=dataset.name)\r\n    algorithm = models.CharField(max_length=50)\r\n    accuracy = models.DecimalField(max_digits=6, decimal_places=2)\r\n    config = models.ForeignKey(ModelConfig, on_delete=models.CASCADE)\r\n    model_file = models.FileField(upload_to='saved_models/')\r\n    encoder_file = models.FileField(upload_to='saved_encoders/', null=True, blank=True)\r\n    scaler_file = models.FileField(upload_to='saved_scalers/', null=True, blank=True)\r\n    target_encoder = models.FileField(upload_to='saved_scalers/', null=True, blank=True)\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n    updated_at = models.DateTimeField(auto_now=True)\r\n    is_active = models.BooleanField(default=True)\r\n\r\n    class Meta:\r\n        ordering = ['-created_at']\r\n        verbose_name = 'Saved Model'\r\n        verbose_name_plural = 'Saved Models'\r\n\r\n    def __str__(self):\r\n        return f\"{self.dataset.name} | {self.user.username} | {self.algorithm}\"\r\n\r\n\r\nclass Badges(models.Model):\r\n    name = models.CharField(max_length=250)\r\n    description = models.CharField(max_length=250)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n    \r\n\r\nclass Achievements(models.Model):\r\n    name = models.CharField(max_length=250)\r\n    description = models.CharField(max_length=250)\r\n    criteria = JSONField()\r\n    points = models.IntegerField()\r\n\r\n    def __str__(self):\r\n        return self.name\r\n    \r\n\r\nclass UserAchievement(models.Model):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    achievement = models.OneToOneField(Achievements, on_delete=models.CASCADE)\r\n    earned_at = models.DateTimeField(auto_now_add=True)\r\n\r\n    def __str__(self):\r\n        return self.achievement.name\r\n    \r\n\r\nclass UserBadge(models.Model):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    badge = models.OneToOneField(Badges, on_delete=models.CASCADE)\r\n    earned_at = models.DateTimeField(auto_now_add=True)\r\n\r\n    def __str__(self):\r\n        return self.badge.name\r\n    \r\n\r\nclass LeaderBoard(models.Model):\r\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\r\n    points = models.IntegerField()\r\n    last_updated = models.DateTimeField(auto_now_add=True)\r\n\r\n    def __str__(self):\r\n        return self.user.username"
        }
    ]
}