{
    "sourceFile": "src/pages/Dashboard/Dashboard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752558937650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752561028673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n     { month: 'Apr', classification: 88, regression: 85 },\r\n     { month: 'May', classification: 90, regression: 87 }\r\n   ];\r\n \r\n-  return (\r\n+   return (\r\n     <div className=\"min-h-screen flex flex-col bg-gray-50\">\r\n       <Navbar />\r\n       \r\n       {/* Dashboard Header */}\r\n"
                },
                {
                    "date": 1752561046552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,118 @@\n-// src/pages/Dashboard.jsx\r\n-import React from 'react';\r\n+import React, { useState, useEffect } from 'react';\r\n import Navbar from '../../components/Navbar';\r\n import Footer from '../../components/Footer';\r\n-import { FiActivity, FiDatabase, FiTrendingUp, FiBarChart2, FiClock } from 'react-icons/fi';\r\n+import { FiActivity, FiDatabase, FiTrendingUp, FiClock } from 'react-icons/fi';\r\n+import axios from 'axios';\r\n \r\n function Dashboard() {\r\n-  // Core metrics from backend\r\n+  const [dashboardData, setDashboardData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  const API_URL = import.meta.env.VITE_API_URL;\r\n+  const accessToken = localStorage.getItem('access');\r\n+\r\n+  useEffect(() => {\r\n+    const fetchDashboardData = async () => {\r\n+      try {\r\n+        const response = await axios.get(`${API_URL}/dashboard/stats/`, {\r\n+          headers: {\r\n+            'Authorization': `Bearer ${accessToken}`\r\n+          }\r\n+        });\r\n+        \r\n+        setDashboardData(response.data);\r\n+        setError(null);\r\n+      } catch (err) {\r\n+        console.error('Failed to fetch dashboard data:', err);\r\n+        setError('Failed to load dashboard data');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchDashboardData();\r\n+  }, []);\r\n+\r\n+  if (loading) {\r\n+    return (\r\n+      <div className=\"min-h-screen flex flex-col bg-gray-50\">\r\n+        <Navbar />\r\n+        <div className=\"flex-grow flex items-center justify-center\">\r\n+          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500\"></div>\r\n+        </div>\r\n+        <Footer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+\r\n+  if (error || !dashboardData) {\r\n+    return (\r\n+      <div className=\"min-h-screen flex flex-col bg-gray-50\">\r\n+        <Navbar />\r\n+        <div className=\"flex-grow flex items-center justify-center\">\r\n+          <div className=\"text-center p-6 bg-red-50 rounded-lg\">\r\n+            <p className=\"text-red-600\">{error}</p>\r\n+            <button \r\n+              onClick={() => window.location.reload()}\r\n+              className=\"mt-4 px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700\"\r\n+            >\r\n+              Retry\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+        <Footer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+\r\n+  // Process data for display\r\n   const metrics = [\r\n     { \r\n       title: \"Trained Models\", \r\n-      value: 24, \r\n+      value: dashboardData.total_models, \r\n       icon: <FiDatabase className=\"text-2xl text-purple-500\" />,\r\n       description: \"Total models trained\",\r\n-      trend: \"+3 this week\"\r\n+      trend: \"\" // You can calculate trends by comparing with previous period\r\n     },\r\n     { \r\n       title: \"Avg Accuracy\", \r\n-      value: \"87.5%\", \r\n+      value: `${dashboardData.avg_accuracy.toFixed(1)}%`, \r\n       icon: <FiTrendingUp className=\"text-2xl text-green-500\" />,\r\n       description: \"Across all models\",\r\n-      trend: \"+2.1% from last month\"\r\n+      trend: \"\" \r\n     },\r\n     { \r\n       title: \"Active Models\", \r\n-      value: 8, \r\n+      value: dashboardData.active_models, \r\n       icon: <FiActivity className=\"text-2xl text-blue-500\" />,\r\n       description: \"Used in last 7 days\",\r\n-      trend: \"3 used today\"\r\n+      trend: \"\" \r\n     },\r\n     { \r\n       title: \"Avg Training Time\", \r\n-      value: \"4.2m\", \r\n+      value: `${(dashboardData.avg_training_time / 60).toFixed(1)}m`, // Convert seconds to minutes\r\n       icon: <FiClock className=\"text-2xl text-orange-500\" />,\r\n       description: \"Per model\",\r\n-      trend: \"Faster by 1.1m\"\r\n+      trend: \"\" \r\n     }\r\n   ];\r\n \r\n-  // Model type distribution\r\n   const modelDistribution = {\r\n-    classification: 16,\r\n-    regression: 8,\r\n-    total: 24\r\n+    classification: dashboardData.model_types.classification || 0,\r\n+    regression: dashboardData.model_types.regression || 0,\r\n+    total: dashboardData.total_models\r\n   };\r\n \r\n-  // Recent training activity\r\n-  const recentActivity = [\r\n-    { \r\n-      model: \"Customer Churn Predictor\", \r\n-      type: \"Classification\", \r\n-      accuracy: 89.2,\r\n-      status: \"success\",\r\n-      time: \"2 hours ago\"\r\n-    },\r\n-    { \r\n-      model: \"House Price Prediction\", \r\n-      type: \"Regression\", \r\n-      accuracy: 92.4,\r\n-      status: \"success\", \r\n-      time: \"1 day ago\"\r\n-    },\r\n-    { \r\n-      model: \"Sales Forecast\", \r\n-      type: \"Regression\", \r\n-      accuracy: 85.7,\r\n-      status: \"success\", \r\n-      time: \"2 days ago\"\r\n-    }\r\n-  ];\r\n+  const recentActivity = dashboardData.recent_activity.map(model => ({\r\n+    model: model.name,\r\n+    type: model.config__problem_type,\r\n+    accuracy: model.accuracy,\r\n+    status: \"success\",\r\n+    time: new Date(model.created_at).toLocaleDateString()\r\n+  }));\r\n \r\n-  // Accuracy trends (mock data)\r\n-  const accuracyTrends = [\r\n-    { month: 'Jan', classification: 82, regression: 78 },\r\n-    { month: 'Feb', classification: 85, regression: 81 },\r\n-    { month: 'Mar', classification: 84, regression: 83 },\r\n-    { month: 'Apr', classification: 88, regression: 85 },\r\n-    { month: 'May', classification: 90, regression: 87 }\r\n-  ];\r\n-\r\n    return (\r\n     <div className=\"min-h-screen flex flex-col bg-gray-50\">\r\n       <Navbar />\r\n       \r\n"
                },
                {
                    "date": 1752562064783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \r\n   useEffect(() => {\r\n     const fetchDashboardData = async () => {\r\n       try {\r\n-        const response = await axios.get(`${API_URL}/dashboard/stats/`, {\r\n+        const response = await axios.get(`${API_URL}/file/dashboard-stats/`, {\r\n           headers: {\r\n             'Authorization': `Bearer ${accessToken}`\r\n           }\r\n         });\r\n@@ -111,8 +111,9 @@\n     status: \"success\",\r\n     time: new Date(model.created_at).toLocaleDateString()\r\n   }));\r\n \r\n+\r\n    return (\r\n     <div className=\"min-h-screen flex flex-col bg-gray-50\">\r\n       <Navbar />\r\n       \r\n"
                },
                {
                    "date": 1752562423817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,15 +103,21 @@\n     regression: dashboardData.model_types.regression || 0,\r\n     total: dashboardData.total_models\r\n   };\r\n \r\n-  const recentActivity = dashboardData.recent_activity.map(model => ({\r\n+ const recentActivity = dashboardData.recent_activity.map(model => {\r\n+  const pad = (n) => n.toString().padStart(2, '0');\r\n+  const date = new Date(model.created_at);\r\n+  const formattedDate = `${pad(date.getDate())}/${pad(date.getMonth() + 1)}/${date.getFullYear()}`;\r\n+\r\n+  return {\r\n     model: model.name,\r\n     type: model.config__problem_type,\r\n     accuracy: model.accuracy,\r\n     status: \"success\",\r\n-    time: new Date(model.created_at).toLocaleDateString()\r\n-  }));\r\n+    time: formattedDate\r\n+  };\r\n+});\r\n \r\n \r\n    return (\r\n     <div className=\"min-h-screen flex flex-col bg-gray-50\">\r\n"
                },
                {
                    "date": 1752761669133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,16 @@\n-import React, { useState, useEffect } from 'react';\r\n+import React, { useState, useEffect, useMemo } from 'react';\r\n import Navbar from '../../components/Navbar';\r\n import Footer from '../../components/Footer';\r\n import { FiActivity, FiDatabase, FiTrendingUp, FiClock } from 'react-icons/fi';\r\n+import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n import axios from 'axios';\r\n \r\n function Dashboard() {\r\n   const [dashboardData, setDashboardData] = useState(null);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n+  const [performanceData, setPerformanceData] = useState([]);\r\n \r\n   const API_URL = import.meta.env.VITE_API_URL;\r\n   const accessToken = localStorage.getItem('access');\r\n \r\n@@ -21,8 +23,19 @@\n           }\r\n         });\r\n         \r\n         setDashboardData(response.data);\r\n+        console.log(response.data);\r\n+        console.log(dashboardData);\r\n+          if (response.data?.performance_distribution) {\r\n+            \r\n+      const formattedData = response.data.performance_distribution.map(item => ({\r\n+        name: item.performance_range,\r\n+        value: item.count,\r\n+      }));\r\n+      setPerformanceData(formattedData); // You need to define this state\r\n+    }\r\n+\r\n         setError(null);\r\n       } catch (err) {\r\n         console.error('Failed to fetch dashboard data:', err);\r\n         setError('Failed to load dashboard data');\r\n@@ -33,8 +46,85 @@\n \r\n     fetchDashboardData();\r\n   }, []);\r\n \r\n+ const metrics = useMemo(() => {\r\n+  if (!dashboardData) return [];\r\n+\r\n+  const recent = dashboardData.recent_activity || [];\r\n+  const totalCount = dashboardData.total_models || 0;\r\n+\r\n+  const avgAccuracy = parseFloat(dashboardData.avg_accuracy ?? 0);\r\n+  const avgTrainingTime = parseFloat(dashboardData.avg_training_time ?? 0);\r\n+\r\n+  const activeModels = dashboardData.active_models ?? 0;\r\n+  const recentCount = recent.length;\r\n+\r\n+  // Avg Accuracy\r\n+  const recentAvgAcc = recentCount\r\n+    ? recent.reduce((sum, m) => sum + parseFloat(m.accuracy ?? 0), 0) / recentCount\r\n+    : null;\r\n+\r\n+  const accTrend =\r\n+    avgAccuracy && recentAvgAcc\r\n+      ? ((recentAvgAcc - avgAccuracy) / avgAccuracy) * 100\r\n+      : null;\r\n+\r\n+  // Avg Training Time\r\n+  const recentTrainTime =\r\n+    recentCount && recent.every((m) => 'training_time' in m)\r\n+      ? recent.reduce((sum, m) => sum + parseFloat(m.training_time || 0), 0) / recentCount\r\n+      : null;\r\n+\r\n+  const timeTrend =\r\n+    avgTrainingTime &&\r\n+    recentTrainTime != null &&\r\n+    recentCount !== totalCount // Avoid showing trend if same models\r\n+      ? recentTrainTime - avgTrainingTime\r\n+      : null;\r\n+\r\n+  const activePercent = totalCount ? (activeModels / totalCount) * 100 : 0;\r\n+\r\n+  return [\r\n+    {\r\n+      title: \"Trained Models\",\r\n+      value: totalCount,\r\n+      icon: <FiDatabase className=\"text-2xl text-purple-500\" />,\r\n+      description: \"Total models trained\",\r\n+      trend: `${recentCount} new`,\r\n+    },\r\n+    {\r\n+      title: \"Avg Accuracy\",\r\n+      value: isNaN(avgAccuracy) ? '–' : `${avgAccuracy.toFixed(2)}%`,\r\n+      icon: <FiTrendingUp className=\"text-2xl text-green-500\" />,\r\n+      description: \"Across all models\",\r\n+      trend:\r\n+        accTrend != null\r\n+          ? `${accTrend >= 0 ? '+' : ''}${accTrend.toFixed(2)}%`\r\n+          : '',\r\n+    },\r\n+    {\r\n+      title: \"Active Models\",\r\n+      value: activeModels,\r\n+      icon: <FiActivity className=\"text-2xl text-blue-500\" />,\r\n+      description: \"Total models currently active\",\r\n+      trend: `${activePercent.toFixed(2)}% active`,\r\n+    },\r\n+    {\r\n+      title: \"Avg Training Time\",\r\n+      value: isNaN(avgTrainingTime) ? '–' : `${avgTrainingTime.toFixed(2)}s`,\r\n+      icon: <FiClock className=\"text-2xl text-orange-500\" />,\r\n+      description: \"Per model\",\r\n+      trend:\r\n+        recentTrainTime != null && timeTrend != null && timeTrend !== 0\r\n+          ? `${timeTrend > 0 ? '+' : ''}${timeTrend.toFixed(2)}s`\r\n+          : '–',\r\n+    },\r\n+  ];\r\n+}, [dashboardData]);\r\n+\r\n+\r\n+\r\n   if (loading) {\r\n     return (\r\n       <div className=\"min-h-screen flex flex-col bg-gray-50\">\r\n         <Navbar />\r\n@@ -65,39 +155,8 @@\n       </div>\r\n     );\r\n   }\r\n \r\n-  // Process data for display\r\n-  const metrics = [\r\n-    { \r\n-      title: \"Trained Models\", \r\n-      value: dashboardData.total_models, \r\n-      icon: <FiDatabase className=\"text-2xl text-purple-500\" />,\r\n-      description: \"Total models trained\",\r\n-      trend: \"\" // You can calculate trends by comparing with previous period\r\n-    },\r\n-    { \r\n-      title: \"Avg Accuracy\", \r\n-      value: `${dashboardData.avg_accuracy.toFixed(1)}%`, \r\n-      icon: <FiTrendingUp className=\"text-2xl text-green-500\" />,\r\n-      description: \"Across all models\",\r\n-      trend: \"\" \r\n-    },\r\n-    { \r\n-      title: \"Active Models\", \r\n-      value: dashboardData.active_models, \r\n-      icon: <FiActivity className=\"text-2xl text-blue-500\" />,\r\n-      description: \"Used in last 7 days\",\r\n-      trend: \"\" \r\n-    },\r\n-    { \r\n-      title: \"Avg Training Time\", \r\n-      value: `${(dashboardData.avg_training_time / 60).toFixed(1)}m`, // Convert seconds to minutes\r\n-      icon: <FiClock className=\"text-2xl text-orange-500\" />,\r\n-      description: \"Per model\",\r\n-      trend: \"\" \r\n-    }\r\n-  ];\r\n \r\n   const modelDistribution = {\r\n     classification: dashboardData.model_types.classification || 0,\r\n     regression: dashboardData.model_types.regression || 0,\r\n@@ -117,9 +176,11 @@\n     time: formattedDate\r\n   };\r\n });\r\n \r\n+  const COLORS = ['#10B981', '#3B82F6', '#F59E0B', '#EF4444'];\r\n \r\n+\r\n    return (\r\n     <div className=\"min-h-screen flex flex-col bg-gray-50\">\r\n       <Navbar />\r\n       \r\n@@ -171,37 +232,41 @@\n           </div>\r\n \r\n           {/* Main Content */}\r\n           <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\r\n-            {/* Accuracy Trends */}\r\n             <div className=\"bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200 lg:col-span-2\">\r\n-              <div className=\"px-6 py-4 border-b border-gray-200\">\r\n-                <h2 className=\"font-semibold text-lg text-gray-900\">\r\n-                  Accuracy Trends\r\n-                </h2>\r\n-                <p className=\"text-sm text-gray-500 mt-1\">\r\n-                  Monthly performance by model type\r\n-                </p>\r\n-              </div>\r\n-              <div className=\"p-6\">\r\n-                {/* Chart placeholder */}\r\n-                <div className=\"h-64 bg-gray-50 rounded flex items-center justify-center\">\r\n-                  <div className=\"text-center\">\r\n-                    <p className=\"text-gray-500\">Accuracy trends chart would display here</p>\r\n-                    <div className=\"mt-4 flex justify-center space-x-4\">\r\n-                      <div className=\"flex items-center\">\r\n-                        <div className=\"w-3 h-3 rounded-full bg-blue-500 mr-2\"></div>\r\n-                        <span className=\"text-xs\">Classification</span>\r\n-                      </div>\r\n-                      <div className=\"flex items-center\">\r\n-                        <div className=\"w-3 h-3 rounded-full bg-green-500 mr-2\"></div>\r\n-                        <span className=\"text-xs\">Regression</span>\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n+                <div className=\"px-6 py-4 border-b border-gray-200\">\r\n+                  <h2 className=\"font-semibold text-lg text-gray-900\">\r\n+                    Model Performance Distribution\r\n+                  </h2>\r\n+                  <p className=\"text-sm text-gray-500 mt-1\">\r\n+                    Breakdown of models by accuracy ranges\r\n+                  </p>\r\n                 </div>\r\n+                <div className=\"p-6 h-64\">\r\n+                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n+                    <PieChart>\r\n+                      <Pie\r\n+                        data={performanceData}\r\n+                        cx=\"50%\"\r\n+                        cy=\"50%\"\r\n+                        labelLine={false}\r\n+                        outerRadius={85}\r\n+                        fill=\"#8884d8\"\r\n+                        dataKey=\"value\"\r\n+                        nameKey=\"name\"\r\n+                        label={false}\r\n+                      >\r\n+                        {performanceData.map((entry, index) => (\r\n+                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n+                        ))}\r\n+                      </Pie>\r\n+                      <Tooltip />\r\n+                      <Legend />\r\n+                    </PieChart>\r\n+                  </ResponsiveContainer>\r\n+                </div>\r\n               </div>\r\n-            </div>\r\n \r\n             {/* Model Distribution */}\r\n             <div className=\"bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200\">\r\n               <div className=\"px-6 py-4 border-b border-gray-200\">\r\n@@ -257,9 +322,19 @@\n                 </div>\r\n                 \r\n                 <div className=\"mt-6 bg-gray-50 p-3 rounded\">\r\n                   <p className=\"text-sm font-medium text-gray-700\">\r\n-                    <span className=\"text-blue-600\">Classification</span> models are {Math.round(modelDistribution.classification/modelDistribution.regression)}x more common\r\n+                    {modelDistribution.classification > modelDistribution.regression ? (\r\n+                      <>\r\n+                        <span className=\"text-blue-600\">Classification</span> models are{\" \"}\r\n+                        {(modelDistribution.classification / modelDistribution.regression).toFixed(1)}x more common\r\n+                      </>\r\n+                    ) : (\r\n+                      <>\r\n+                        <span className=\"text-green-600\">Regression</span> models are{\" \"}\r\n+                        {(modelDistribution.regression / modelDistribution.classification).toFixed(1)}x more common\r\n+                      </>\r\n+                    )}\r\n                   </p>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n"
                },
                {
                    "date": 1752761707909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,12 +96,12 @@\n       title: \"Avg Accuracy\",\r\n       value: isNaN(avgAccuracy) ? '–' : `${avgAccuracy.toFixed(2)}%`,\r\n       icon: <FiTrendingUp className=\"text-2xl text-green-500\" />,\r\n       description: \"Across all models\",\r\n-      trend:\r\n-        accTrend != null\r\n-          ? `${accTrend >= 0 ? '+' : ''}${accTrend.toFixed(2)}%`\r\n-          : '',\r\n+      trend: '',\r\n+        // accTrend != null\r\n+        //   ? `${accTrend >= 0 ? '+' : ''}${accTrend.toFixed(2)}%`\r\n+        //   : '',\r\n     },\r\n     {\r\n       title: \"Active Models\",\r\n       value: activeModels,\r\n"
                },
                {
                    "date": 1752761728085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,11 +97,8 @@\n       value: isNaN(avgAccuracy) ? '–' : `${avgAccuracy.toFixed(2)}%`,\r\n       icon: <FiTrendingUp className=\"text-2xl text-green-500\" />,\r\n       description: \"Across all models\",\r\n       trend: '',\r\n-        // accTrend != null\r\n-        //   ? `${accTrend >= 0 ? '+' : ''}${accTrend.toFixed(2)}%`\r\n-        //   : '',\r\n     },\r\n     {\r\n       title: \"Active Models\",\r\n       value: activeModels,\r\n@@ -113,12 +110,12 @@\n       title: \"Avg Training Time\",\r\n       value: isNaN(avgTrainingTime) ? '–' : `${avgTrainingTime.toFixed(2)}s`,\r\n       icon: <FiClock className=\"text-2xl text-orange-500\" />,\r\n       description: \"Per model\",\r\n-      trend:\r\n-        recentTrainTime != null && timeTrend != null && timeTrend !== 0\r\n-          ? `${timeTrend > 0 ? '+' : ''}${timeTrend.toFixed(2)}s`\r\n-          : '–',\r\n+      trend: '',\r\n+        // recentTrainTime != null && timeTrend != null && timeTrend !== 0\r\n+        //   ? `${timeTrend > 0 ? '+' : ''}${timeTrend.toFixed(2)}s`\r\n+        //   : '–',\r\n     },\r\n   ];\r\n }, [dashboardData]);\r\n \r\n"
                },
                {
                    "date": 1752761768174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,31 +58,9 @@\n \r\n   const activeModels = dashboardData.active_models ?? 0;\r\n   const recentCount = recent.length;\r\n \r\n-  // Avg Accuracy\r\n-  const recentAvgAcc = recentCount\r\n-    ? recent.reduce((sum, m) => sum + parseFloat(m.accuracy ?? 0), 0) / recentCount\r\n-    : null;\r\n \r\n-  const accTrend =\r\n-    avgAccuracy && recentAvgAcc\r\n-      ? ((recentAvgAcc - avgAccuracy) / avgAccuracy) * 100\r\n-      : null;\r\n-\r\n-  // Avg Training Time\r\n-  const recentTrainTime =\r\n-    recentCount && recent.every((m) => 'training_time' in m)\r\n-      ? recent.reduce((sum, m) => sum + parseFloat(m.training_time || 0), 0) / recentCount\r\n-      : null;\r\n-\r\n-  const timeTrend =\r\n-    avgTrainingTime &&\r\n-    recentTrainTime != null &&\r\n-    recentCount !== totalCount // Avoid showing trend if same models\r\n-      ? recentTrainTime - avgTrainingTime\r\n-      : null;\r\n-\r\n   const activePercent = totalCount ? (activeModels / totalCount) * 100 : 0;\r\n \r\n   return [\r\n     {\r\n@@ -111,11 +89,8 @@\n       value: isNaN(avgTrainingTime) ? '–' : `${avgTrainingTime.toFixed(2)}s`,\r\n       icon: <FiClock className=\"text-2xl text-orange-500\" />,\r\n       description: \"Per model\",\r\n       trend: '',\r\n-        // recentTrainTime != null && timeTrend != null && timeTrend !== 0\r\n-        //   ? `${timeTrend > 0 ? '+' : ''}${timeTrend.toFixed(2)}s`\r\n-        //   : '–',\r\n     },\r\n   ];\r\n }, [dashboardData]);\r\n \r\n"
                }
            ],
            "date": 1752558937649,
            "name": "Commit-0",
            "content": "// src/pages/Dashboard.jsx\r\nimport React from 'react';\r\nimport Navbar from '../../components/Navbar';\r\nimport Footer from '../../components/Footer';\r\nimport { FiActivity, FiDatabase, FiTrendingUp, FiBarChart2, FiClock } from 'react-icons/fi';\r\n\r\nfunction Dashboard() {\r\n  // Core metrics from backend\r\n  const metrics = [\r\n    { \r\n      title: \"Trained Models\", \r\n      value: 24, \r\n      icon: <FiDatabase className=\"text-2xl text-purple-500\" />,\r\n      description: \"Total models trained\",\r\n      trend: \"+3 this week\"\r\n    },\r\n    { \r\n      title: \"Avg Accuracy\", \r\n      value: \"87.5%\", \r\n      icon: <FiTrendingUp className=\"text-2xl text-green-500\" />,\r\n      description: \"Across all models\",\r\n      trend: \"+2.1% from last month\"\r\n    },\r\n    { \r\n      title: \"Active Models\", \r\n      value: 8, \r\n      icon: <FiActivity className=\"text-2xl text-blue-500\" />,\r\n      description: \"Used in last 7 days\",\r\n      trend: \"3 used today\"\r\n    },\r\n    { \r\n      title: \"Avg Training Time\", \r\n      value: \"4.2m\", \r\n      icon: <FiClock className=\"text-2xl text-orange-500\" />,\r\n      description: \"Per model\",\r\n      trend: \"Faster by 1.1m\"\r\n    }\r\n  ];\r\n\r\n  // Model type distribution\r\n  const modelDistribution = {\r\n    classification: 16,\r\n    regression: 8,\r\n    total: 24\r\n  };\r\n\r\n  // Recent training activity\r\n  const recentActivity = [\r\n    { \r\n      model: \"Customer Churn Predictor\", \r\n      type: \"Classification\", \r\n      accuracy: 89.2,\r\n      status: \"success\",\r\n      time: \"2 hours ago\"\r\n    },\r\n    { \r\n      model: \"House Price Prediction\", \r\n      type: \"Regression\", \r\n      accuracy: 92.4,\r\n      status: \"success\", \r\n      time: \"1 day ago\"\r\n    },\r\n    { \r\n      model: \"Sales Forecast\", \r\n      type: \"Regression\", \r\n      accuracy: 85.7,\r\n      status: \"success\", \r\n      time: \"2 days ago\"\r\n    }\r\n  ];\r\n\r\n  // Accuracy trends (mock data)\r\n  const accuracyTrends = [\r\n    { month: 'Jan', classification: 82, regression: 78 },\r\n    { month: 'Feb', classification: 85, regression: 81 },\r\n    { month: 'Mar', classification: 84, regression: 83 },\r\n    { month: 'Apr', classification: 88, regression: 85 },\r\n    { month: 'May', classification: 90, regression: 87 }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\r\n      <Navbar />\r\n      \r\n      {/* Dashboard Header */}\r\n      <header className=\"bg-white shadow-sm\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <div>\r\n              <h1 className=\"text-2xl font-bold text-gray-900\">\r\n                Model Training Dashboard\r\n              </h1>\r\n              <p className=\"text-sm text-gray-500 mt-1\">\r\n                Monitor your machine learning model performance\r\n              </p>\r\n            </div>\r\n            <a \r\n              href=\"/playground\" \r\n              className=\"btn-primary px-4 py-2 rounded-md bg-purple-600 text-white hover:bg-purple-700 transition flex items-center\"\r\n            >\r\n              <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n              </svg>\r\n              Train New Model\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"flex-grow\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n          {/* Key Metrics */}\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n            {metrics.map((metric, index) => (\r\n              <div key={index} className=\"bg-white p-5 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition\">\r\n                <div className=\"flex justify-between\">\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-500 uppercase tracking-wider\">{metric.title}</p>\r\n                    <p className=\"text-2xl font-semibold mt-1\">{metric.value}</p>\r\n                  </div>\r\n                  <div className=\"p-2 bg-gray-100 rounded-full\">\r\n                    {metric.icon}\r\n                  </div>\r\n                </div>\r\n                <p className=\"text-xs text-gray-500 mt-3\">\r\n                  {metric.description} • <span className=\"text-purple-600\">{metric.trend}</span>\r\n                </p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Main Content */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\r\n            {/* Accuracy Trends */}\r\n            <div className=\"bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200 lg:col-span-2\">\r\n              <div className=\"px-6 py-4 border-b border-gray-200\">\r\n                <h2 className=\"font-semibold text-lg text-gray-900\">\r\n                  Accuracy Trends\r\n                </h2>\r\n                <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Monthly performance by model type\r\n                </p>\r\n              </div>\r\n              <div className=\"p-6\">\r\n                {/* Chart placeholder */}\r\n                <div className=\"h-64 bg-gray-50 rounded flex items-center justify-center\">\r\n                  <div className=\"text-center\">\r\n                    <p className=\"text-gray-500\">Accuracy trends chart would display here</p>\r\n                    <div className=\"mt-4 flex justify-center space-x-4\">\r\n                      <div className=\"flex items-center\">\r\n                        <div className=\"w-3 h-3 rounded-full bg-blue-500 mr-2\"></div>\r\n                        <span className=\"text-xs\">Classification</span>\r\n                      </div>\r\n                      <div className=\"flex items-center\">\r\n                        <div className=\"w-3 h-3 rounded-full bg-green-500 mr-2\"></div>\r\n                        <span className=\"text-xs\">Regression</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Model Distribution */}\r\n            <div className=\"bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200\">\r\n              <div className=\"px-6 py-4 border-b border-gray-200\">\r\n                <h2 className=\"font-semibold text-lg text-gray-900\">\r\n                  Model Types\r\n                </h2>\r\n                <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Distribution of your trained models\r\n                </p>\r\n              </div>\r\n              <div className=\"p-6\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                  <div>\r\n                    <span className=\"text-3xl font-bold\">{modelDistribution.total}</span>\r\n                    <span className=\"text-gray-500 ml-1\">total models</span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  {/* Classification */}\r\n                  <div>\r\n                    <div className=\"flex justify-between text-sm mb-1\">\r\n                      <span className=\"font-medium\">Classification</span>\r\n                      <span>{Math.round((modelDistribution.classification/modelDistribution.total)*100)}%</span>\r\n                    </div>\r\n                    <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                      <div \r\n                        className=\"bg-blue-600 h-2.5 rounded-full\" \r\n                        style={{ width: `${(modelDistribution.classification/modelDistribution.total)*100}%` }}\r\n                      ></div>\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-500 mt-1\">\r\n                      {modelDistribution.classification} models\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Regression */}\r\n                  <div>\r\n                    <div className=\"flex justify-between text-sm mb-1\">\r\n                      <span className=\"font-medium\">Regression</span>\r\n                      <span>{Math.round((modelDistribution.regression/modelDistribution.total)*100)}%</span>\r\n                    </div>\r\n                    <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                      <div \r\n                        className=\"bg-green-600 h-2.5 rounded-full\" \r\n                        style={{ width: `${(modelDistribution.regression/modelDistribution.total)*100}%` }}\r\n                      ></div>\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-500 mt-1\">\r\n                      {modelDistribution.regression} models\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"mt-6 bg-gray-50 p-3 rounded\">\r\n                  <p className=\"text-sm font-medium text-gray-700\">\r\n                    <span className=\"text-blue-600\">Classification</span> models are {Math.round(modelDistribution.classification/modelDistribution.regression)}x more common\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Recent Activity */}\r\n          <div className=\"bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200\">\r\n            <div className=\"px-6 py-4 border-b border-gray-200\">\r\n              <h2 className=\"font-semibold text-lg text-gray-900\">\r\n                Recent Training Activity\r\n              </h2>\r\n              <p className=\"text-sm text-gray-500 mt-1\">\r\n                Your most recent model training sessions\r\n              </p>\r\n            </div>\r\n            <div className=\"divide-y divide-gray-200\">\r\n              {recentActivity.map((activity, index) => (\r\n                <div key={index} className=\"p-4 hover:bg-gray-50 transition\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <div className=\"flex items-center\">\r\n                      <div className={`p-2 rounded-full ${\r\n                        activity.status === 'success' ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'\r\n                      }`}>\r\n                        {activity.status === 'success' ? (\r\n                          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\r\n                          </svg>\r\n                        ) : (\r\n                          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n                          </svg>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"ml-4\">\r\n                        <h3 className=\"font-medium text-gray-900\">{activity.model}</h3>\r\n                        <div className=\"flex mt-1 space-x-4\">\r\n                          <span className={`text-xs px-2 py-1 rounded-full ${\r\n                            activity.type === 'Classification' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'\r\n                          }`}>\r\n                            {activity.type}\r\n                          </span>\r\n                          <span className=\"text-xs text-gray-500\">\r\n                            {activity.accuracy}% accuracy\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-500\">\r\n                      {activity.time}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;"
        }
    ]
}