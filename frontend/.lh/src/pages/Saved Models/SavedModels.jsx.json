{
    "sourceFile": "src/pages/Saved Models/SavedModels.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1752226724521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752226906337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,37 +107,45 @@\n     }\r\n   }\r\n };\r\n \r\n-  // Get model input features\r\n-  const getModelFeatures = async (modelId) => {\r\n-    try {\r\n+// Update getModelFeatures to initialize input types and categorical options\r\n+const getModelFeatures = async (modelId) => {\r\n+  try {\r\n+    const model = models.find(model => model.id === modelId);\r\n+    if (!model) throw new Error('Model not found');\r\n+\r\n+    // Initialize inputs, types, and categorical options\r\n+    const inputs = {};\r\n+    const types = {};\r\n+    const categoricalOptions = {};\r\n+    \r\n+    model.features.forEach(feature => {\r\n+      const featureName = typeof feature === 'string' ? feature : feature.name;\r\n+      inputs[featureName] = '';\r\n+      types[featureName] = model.config?.feature_types?.[featureName] || 'float';\r\n       \r\n-      const model = models.find(model => model.id === modelId);\r\n-      if (!model) {\r\n-        throw new Error('Model not found');\r\n+      // Store categorical options if they exist\r\n+      if (model.config?.categorical_values?.[featureName]) {\r\n+        categoricalOptions[featureName] = model.config.categorical_values[featureName];\r\n       }\r\n-      \r\n-      console.log('Features:',model.features)\r\n+    });\r\n \r\n-      setSelectedModel({\r\n-        ...model,\r\n-        features: Array.isArray(model?.features) ? model.features : []\r\n-      });\r\n-      \r\n-      // Initialize prediction inputs\r\n-      const inputs = {};\r\n-      model.features.forEach(feature => {\r\n-        inputs[feature.name] = '';\r\n-      });\r\n-      setPredictionInputs(inputs);\r\n-      setPredictionResult(null);\r\n-    } catch (error) {\r\n-      console.error('Error fetching model features:', error);\r\n-      alert('Failed to load model details. Please try again.');\r\n-    }\r\n-  };\r\n+    setSelectedModel({\r\n+      ...model,\r\n+      features: Array.isArray(model.features) ? model.features : []\r\n+    });\r\n+    setPredictionInputs(inputs);\r\n+    setInputTypes(types);\r\n+    setCategoricalOptions(categoricalOptions); // Add this state\r\n+    setPredictionResult(null);\r\n \r\n+  } catch (error) {\r\n+    console.error('Error fetching model features:', error);\r\n+    toast.error('Failed to load model details');\r\n+  }\r\n+};\r\n+\r\n   // Handle prediction input change\r\n   const handleInputChange = (featureName, value) => {\r\n     setPredictionInputs(prev => ({\r\n       ...prev,\r\n"
                },
                {
                    "date": 1752227011506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,8 +107,9 @@\n     }\r\n   }\r\n };\r\n \r\n+\r\n // Update getModelFeatures to initialize input types and categorical options\r\n const getModelFeatures = async (modelId) => {\r\n   try {\r\n     const model = models.find(model => model.id === modelId);\r\n@@ -270,35 +271,44 @@\n                 \r\n                 <div className=\"space-y-5\">\r\n                   {selectedModel.features?.map(feature => {\r\n                     const featureName = typeof feature === 'string' ? feature : feature.name;\r\n-                    const featureType = selectedModel.config?.feature_types?.[featureName] || 'numeric';\r\n-                    const isCategorical = featureType === 'categorical';\r\n+                    const featureType = inputTypes[featureName];\r\n+                    const isCategorical = featureType === 'categorical' || featureType === 'object';\r\n+                    const isFloat = featureType === 'float';\r\n+                    const options = categoricalOptions[featureName] || [];\r\n \r\n                     return (\r\n-                      <div key={featureName} className=\"grid grid-cols-1 gap-1 sm:grid-cols-3\">\r\n+                      <div key={featureName} className=\"grid grid-cols-1 gap-1 sm:grid-cols-3 mb-4\">\r\n                         <label className=\"block text-sm font-medium text-gray-700 sm:col-span-1\">\r\n                           {featureName}\r\n                           <span className=\"text-gray-400 ml-1\">({featureType})</span>\r\n                         </label>\r\n+                        \r\n                         <div className=\"sm:col-span-2\">\r\n-                          {isCategorical ? (\r\n+                          {isCategorical && options.length > 0 ? (\r\n                             <select\r\n                               value={predictionInputs[featureName] || ''}\r\n                               onChange={(e) => handleInputChange(featureName, e.target.value)}\r\n                               className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n+                              required\r\n                             >\r\n-                              <option value=\"\">Select option</option>\r\n-                              <option value=\"Yes\">Yes</option>\r\n-                              <option value=\"No\">No</option>\r\n+                              <option value=\"\">Select an option</option>\r\n+                              {options.map(option => (\r\n+                                <option key={option} value={option}>\r\n+                                  {option}\r\n+                                </option>\r\n+                              ))}\r\n                             </select>\r\n                           ) : (\r\n                             <input\r\n-                              type=\"number\"\r\n+                              type={isFloat ? \"number\" : \"text\"}\r\n+                              step={isFloat ? \"0.01\" : undefined}\r\n                               value={predictionInputs[featureName] || ''}\r\n                               onChange={(e) => handleInputChange(featureName, e.target.value)}\r\n                               className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n                               placeholder={`Enter ${featureName}`}\r\n+                              required\r\n                             />\r\n                           )}\r\n                         </div>\r\n                       </div>\r\n"
                },
                {
                    "date": 1752227113486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n   const [error, setError] = useState(null);\r\n   const [selectedModel, setSelectedModel] = useState(null);\r\n   const [predictionInputs, setPredictionInputs] = useState({});\r\n   const [predictionResult, setPredictionResult] = useState(null);\r\n+  const [inputTypes, setInputTypes] = useState({})\r\n+  const [categoricalOptions, setCategoricalOptions] = useState({})\r\n \r\n   const API_URL = import.meta.env.VITE_API_URL;\r\n   const accessToken = localStorage.getItem('access');\r\n \r\n@@ -68,20 +70,9 @@\n       alert('Failed to download model. Please try again.');\r\n     }\r\n   };\r\n \r\n-  // Retrain model\r\n-  const retrainModel = async (modelId) => {\r\n-    try {\r\n-      await axios.post(`/api/retrain-model/${modelId}`);\r\n-      alert('Model retraining initiated! Check back later for the updated model.');\r\n-    } catch (error) {\r\n-      console.error('Error retraining model:', error);\r\n-      alert('Failed to retrain model. Please try again.');\r\n-    }\r\n-  };\r\n \r\n-\r\n   // Delete Model\r\n const deleteModel = async (modelId) => {\r\n   if (window.confirm('Are you sure you want to permanently delete this model?')) {\r\n     try {\r\n"
                },
                {
                    "date": 1752227201996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n     // Initialize inputs, types, and categorical options\r\n     const inputs = {};\r\n     const types = {};\r\n     const categoricalOptions = {};\r\n-    \r\n+    console.log('Selected model:',model);\r\n     model.features.forEach(feature => {\r\n       const featureName = typeof feature === 'string' ? feature : feature.name;\r\n       inputs[featureName] = '';\r\n       types[featureName] = model.config?.feature_types?.[featureName] || 'float';\r\n"
                },
                {
                    "date": 1752227297389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,8 +110,9 @@\n     const inputs = {};\r\n     const types = {};\r\n     const categoricalOptions = {};\r\n     console.log('Selected model:',model);\r\n+    \r\n     model.features.forEach(feature => {\r\n       const featureName = typeof feature === 'string' ? feature : feature.name;\r\n       inputs[featureName] = '';\r\n       types[featureName] = model.config?.feature_types?.[featureName] || 'float';\r\n@@ -125,8 +126,10 @@\n     setSelectedModel({\r\n       ...model,\r\n       features: Array.isArray(model.features) ? model.features : []\r\n     });\r\n+    print(inputs);\r\n+    print(types);\r\n     setPredictionInputs(inputs);\r\n     setInputTypes(types);\r\n     setCategoricalOptions(categoricalOptions); // Add this state\r\n     setPredictionResult(null);\r\n"
                },
                {
                    "date": 1752227333188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,10 @@\n     setSelectedModel({\r\n       ...model,\r\n       features: Array.isArray(model.features) ? model.features : []\r\n     });\r\n-    print(inputs);\r\n-    print(types);\r\n+    console.log(inputs);\r\n+    console.log(types);\r\n     setPredictionInputs(inputs);\r\n     setInputTypes(types);\r\n     setCategoricalOptions(categoricalOptions); // Add this state\r\n     setPredictionResult(null);\r\n"
                },
                {
                    "date": 1752227427314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,8 +110,9 @@\n     const inputs = {};\r\n     const types = {};\r\n     const categoricalOptions = {};\r\n     console.log('Selected model:',model);\r\n+    console.log('Model config:',model.config);\r\n     \r\n     model.features.forEach(feature => {\r\n       const featureName = typeof feature === 'string' ? feature : feature.name;\r\n       inputs[featureName] = '';\r\n@@ -126,8 +127,9 @@\n     setSelectedModel({\r\n       ...model,\r\n       features: Array.isArray(model.features) ? model.features : []\r\n     });\r\n+\r\n     console.log(inputs);\r\n     console.log(types);\r\n     setPredictionInputs(inputs);\r\n     setInputTypes(types);\r\n"
                },
                {
                    "date": 1752227536613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,17 +111,17 @@\n     const types = {};\r\n     const categoricalOptions = {};\r\n     console.log('Selected model:',model);\r\n     console.log('Model config:',model.config);\r\n-    \r\n+\r\n     model.features.forEach(feature => {\r\n       const featureName = typeof feature === 'string' ? feature : feature.name;\r\n       inputs[featureName] = '';\r\n-      types[featureName] = model.config?.feature_types?.[featureName] || 'float';\r\n+      types[featureName] = model.feature_types?.[featureName] || 'float';\r\n       \r\n       // Store categorical options if they exist\r\n-      if (model.config?.categorical_values?.[featureName]) {\r\n-        categoricalOptions[featureName] = model.config.categorical_values[featureName];\r\n+      if (model.categorical_values?.[featureName]) {\r\n+        categoricalOptions[featureName] = model.categorical_values[featureName];\r\n       }\r\n     });\r\n \r\n     setSelectedModel({\r\n"
                },
                {
                    "date": 1752227947577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n       selectedModel.features.forEach(feature => {\r\n         const featureName = typeof feature === 'string' ? feature : feature.name;\r\n         inputs[featureName] = predictionInputs[featureName] || '';\r\n       });\r\n-\r\n+      console.log('request body:',inputs);\r\n       const response = await axios.post(\r\n         `${API_URL}/file/predict/${selectedModel.id}/`,\r\n         { inputs },\r\n         {\r\n"
                },
                {
                    "date": 1752228225466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,40 +149,48 @@\n       [featureName]: value\r\n     }));\r\n   };\r\n \r\n-  // Make prediction\r\n-  const makePrediction = async () => {\r\n-    try {\r\n-      // Prepare inputs\r\n-      const inputs = {};\r\n-      selectedModel.features.forEach(feature => {\r\n-        const featureName = typeof feature === 'string' ? feature : feature.name;\r\n-        inputs[featureName] = predictionInputs[featureName] || '';\r\n-      });\r\n-      console.log('request body:',inputs);\r\n-      const response = await axios.post(\r\n-        `${API_URL}/file/predict/${selectedModel.id}/`,\r\n-        { inputs },\r\n-        {\r\n-          headers: {\r\n-            'Authorization': `Bearer ${accessToken}`,\r\n-            'Content-Type': 'application/json',\r\n-          }\r\n+  \r\n+const makePrediction = async () => {\r\n+  try {\r\n+    // Prepare inputs in correct order\r\n+    const inputValues = selectedModel.features.map(feature => {\r\n+      const featureName = typeof feature === 'string' ? feature : feature.name;\r\n+      return parseFloat(predictionInputs[featureName]) || 0; // Convert to number\r\n+    });\r\n+\r\n+    // Get column names in correct order\r\n+    const columns = selectedModel.features.map(f => typeof f === 'string' ? f : f.name);\r\n+\r\n+    console.log('Request values:', inputValues);\r\n+    console.log('Request columns:', columns);\r\n+\r\n+    const response = await axios.post(\r\n+      `${API_URL}/file/predict/${selectedModel.id}/`,\r\n+      { \r\n+        inputs: inputValues,\r\n+        columns: columns \r\n+      },\r\n+      {\r\n+        headers: {\r\n+          'Authorization': `Bearer ${accessToken}`,\r\n+          'Content-Type': 'application/json',\r\n         }\r\n-      );\r\n-      \r\n-      setPredictionResult(response.data.prediction);\r\n-      console.log(response.data);\r\n+      }\r\n+    );\r\n+    \r\n+    setPredictionResult(response.data.prediction);\r\n+    console.log('Prediction response:', response.data);\r\n \r\n-    } catch (error) {\r\n-      console.error('Prediction error:', error);\r\n-      const errorMessage = error.response?.data?.error || \r\n-                          error.response?.data?.message || \r\n-                          'Failed to make prediction';\r\n-      toast.error(errorMessage);\r\n-    }\r\n-  };\r\n+  } catch (error) {\r\n+    console.error('Prediction error:', error);\r\n+    const errorMessage = error.response?.data?.error || \r\n+                        error.response?.data?.message || \r\n+                        'Failed to make prediction';\r\n+    toast.error(errorMessage);\r\n+  }\r\n+};\r\n \r\n   // Loading state\r\n   if (loading) {\r\n     return (\r\n"
                },
                {
                    "date": 1752228773584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,26 +53,56 @@\n \r\n \r\n   // Download model as joblib file\r\n   const downloadModel = async (modelId) => {\r\n-    try {\r\n-      const response = await axios.get(`/api/download-model/${modelId}`, {\r\n-        responseType: 'blob'\r\n-      });\r\n-      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n-      const link = document.createElement('a');\r\n-      link.href = url;\r\n-      link.setAttribute('download', `model_${modelId}.joblib`);\r\n-      document.body.appendChild(link);\r\n-      link.click();\r\n-      link.remove();\r\n-    } catch (error) {\r\n-      console.error('Error downloading model:', error);\r\n-      alert('Failed to download model. Please try again.');\r\n+  try {\r\n+    const response = await axios.get(`${API_URL}/download-model/${modelId}/`, {\r\n+      responseType: 'blob',\r\n+      headers: {\r\n+        'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n+      }\r\n+    });\r\n+\r\n+    // Extract filename from Content-Disposition header\r\n+    const contentDisposition = response.headers['content-disposition'];\r\n+    let filename = `model_${modelId}.zip`; // default fallback\r\n+    \r\n+    if (contentDisposition) {\r\n+      // Try modern RFC 6266 format first\r\n+      const utf8FilenameMatch = contentDisposition.match(/filename\\*=UTF-8''(.+?)(;|$)/i);\r\n+      if (utf8FilenameMatch && utf8FilenameMatch[1]) {\r\n+        filename = decodeURIComponent(utf8FilenameMatch[1]);\r\n+      } \r\n+      // Fallback to legacy format\r\n+      else {\r\n+        const filenameMatch = contentDisposition.match(/filename=\"(.+?)\"/i);\r\n+        if (filenameMatch && filenameMatch[1]) {\r\n+          filename = filenameMatch[1];\r\n+        }\r\n+      }\r\n     }\r\n-  };\r\n \r\n+    // Create download link\r\n+    const url = window.URL.createObjectURL(new Blob([response.data]));\r\n+    const link = document.createElement('a');\r\n+    link.href = url;\r\n+    link.setAttribute('download', filename);\r\n+    document.body.appendChild(link);\r\n+    link.click();\r\n+    \r\n+    // Clean up\r\n+    setTimeout(() => {\r\n+      document.body.removeChild(link);\r\n+      window.URL.revokeObjectURL(url);\r\n+    }, 100);\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error downloading model:', error);\r\n+    toast.error(error.response?.data?.error || 'Failed to download model. Please try again.');\r\n+  }\r\n+};\r\n \r\n+\r\n   // Delete Model\r\n const deleteModel = async (modelId) => {\r\n   if (window.confirm('Are you sure you want to permanently delete this model?')) {\r\n     try {\r\n@@ -149,9 +179,9 @@\n       [featureName]: value\r\n     }));\r\n   };\r\n \r\n-  \r\n+\r\n const makePrediction = async () => {\r\n   try {\r\n     // Prepare inputs in correct order\r\n     const inputValues = selectedModel.features.map(feature => {\r\n"
                },
                {
                    "date": 1752228801099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,11 @@\n \r\n   // Download model as joblib file\r\n   const downloadModel = async (modelId) => {\r\n   try {\r\n+    const model = models.find(model => model.id === modelId);\r\n+    if (!model) throw new Error('Model not found');\r\n+    \r\n     const response = await axios.get(`${API_URL}/download-model/${modelId}/`, {\r\n       responseType: 'blob',\r\n       headers: {\r\n         'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n@@ -101,8 +104,9 @@\n   }\r\n };\r\n \r\n \r\n+\r\n   // Delete Model\r\n const deleteModel = async (modelId) => {\r\n   if (window.confirm('Are you sure you want to permanently delete this model?')) {\r\n     try {\r\n"
                },
                {
                    "date": 1752228861225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,34 +56,37 @@\n   const downloadModel = async (modelId) => {\r\n   try {\r\n     const model = models.find(model => model.id === modelId);\r\n     if (!model) throw new Error('Model not found');\r\n-    \r\n+\r\n     const response = await axios.get(`${API_URL}/download-model/${modelId}/`, {\r\n       responseType: 'blob',\r\n       headers: {\r\n         'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n       }\r\n     });\r\n \r\n+    const name = model.name;\r\n+    console.log(name);\r\n+\r\n     // Extract filename from Content-Disposition header\r\n-    const contentDisposition = response.headers['content-disposition'];\r\n+    // const contentDisposition = response.headers['content-disposition'];\r\n     let filename = `model_${modelId}.zip`; // default fallback\r\n     \r\n-    if (contentDisposition) {\r\n-      // Try modern RFC 6266 format first\r\n-      const utf8FilenameMatch = contentDisposition.match(/filename\\*=UTF-8''(.+?)(;|$)/i);\r\n-      if (utf8FilenameMatch && utf8FilenameMatch[1]) {\r\n-        filename = decodeURIComponent(utf8FilenameMatch[1]);\r\n-      } \r\n-      // Fallback to legacy format\r\n-      else {\r\n-        const filenameMatch = contentDisposition.match(/filename=\"(.+?)\"/i);\r\n-        if (filenameMatch && filenameMatch[1]) {\r\n-          filename = filenameMatch[1];\r\n-        }\r\n-      }\r\n-    }\r\n+    // if (contentDisposition) {\r\n+    //   // Try modern RFC 6266 format first\r\n+    //   const utf8FilenameMatch = contentDisposition.match(/filename\\*=UTF-8''(.+?)(;|$)/i);\r\n+    //   if (utf8FilenameMatch && utf8FilenameMatch[1]) {\r\n+    //     filename = decodeURIComponent(utf8FilenameMatch[1]);\r\n+    //   } \r\n+    //   // Fallback to legacy format\r\n+    //   else {\r\n+    //     const filenameMatch = contentDisposition.match(/filename=\"(.+?)\"/i);\r\n+    //     if (filenameMatch && filenameMatch[1]) {\r\n+    //       filename = filenameMatch[1];\r\n+    //     }\r\n+    //   }\r\n+    // }\r\n \r\n     // Create download link\r\n     const url = window.URL.createObjectURL(new Blob([response.data]));\r\n     const link = document.createElement('a');\r\n"
                },
                {
                    "date": 1752228891174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n   try {\r\n     const model = models.find(model => model.id === modelId);\r\n     if (!model) throw new Error('Model not found');\r\n \r\n-    const response = await axios.get(`${API_URL}/download-model/${modelId}/`, {\r\n+    const response = await axios.get(`${API_URL}/file/download-model/${modelId}/`, {\r\n       responseType: 'blob',\r\n       headers: {\r\n         'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n       }\r\n"
                },
                {
                    "date": 1752228901849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \r\n     const response = await axios.get(`${API_URL}/file/download-model/${modelId}/`, {\r\n       responseType: 'blob',\r\n       headers: {\r\n-        'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n+        'Authorization': `Bearer ${accessToken}`\r\n       }\r\n     });\r\n \r\n     const name = model.name;\r\n"
                },
                {
                    "date": 1752228957688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,19 +56,19 @@\n   const downloadModel = async (modelId) => {\r\n   try {\r\n     const model = models.find(model => model.id === modelId);\r\n     if (!model) throw new Error('Model not found');\r\n+    \r\n+    const name = model.name;\r\n+    console.log(name);\r\n \r\n     const response = await axios.get(`${API_URL}/file/download-model/${modelId}/`, {\r\n       responseType: 'blob',\r\n       headers: {\r\n         'Authorization': `Bearer ${accessToken}`\r\n       }\r\n     });\r\n \r\n-    const name = model.name;\r\n-    console.log(name);\r\n-\r\n     // Extract filename from Content-Disposition header\r\n     // const contentDisposition = response.headers['content-disposition'];\r\n     let filename = `model_${modelId}.zip`; // default fallback\r\n     \r\n"
                },
                {
                    "date": 1752229492245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,10 @@\n   try {\r\n     const model = models.find(model => model.id === modelId);\r\n     if (!model) throw new Error('Model not found');\r\n     \r\n-    const name = model.name;\r\n+    let name = model.name;\r\n+    name = name.split(' ').join('-');\r\n     console.log(name);\r\n \r\n     const response = await axios.get(`${API_URL}/file/download-model/${modelId}/`, {\r\n       responseType: 'blob',\r\n@@ -69,9 +70,9 @@\n     });\r\n \r\n     // Extract filename from Content-Disposition header\r\n     // const contentDisposition = response.headers['content-disposition'];\r\n-    let filename = `model_${modelId}.zip`; // default fallback\r\n+    let filename = `${name}.zip`; // default fallback\r\n     \r\n     // if (contentDisposition) {\r\n     //   // Try modern RFC 6266 format first\r\n     //   const utf8FilenameMatch = contentDisposition.match(/filename\\*=UTF-8''(.+?)(;|$)/i);\r\n"
                },
                {
                    "date": 1752231174535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,8 @@\n   }\r\n };\r\n \r\n \r\n-\r\n   // Delete Model\r\n const deleteModel = async (modelId) => {\r\n   if (window.confirm('Are you sure you want to permanently delete this model?')) {\r\n     try {\r\n@@ -300,9 +299,9 @@\n                   </div>\r\n                   {selectedModel.accuracy && (\r\n                     <div className=\"bg-blue-50 px-3 py-1 rounded-full\">\r\n                       <span className=\"text-blue-800 font-medium\">\r\n-                        Accuracy: {(selectedModel.accuracy * 100).toFixed(1)}%\r\n+                        Accuracy: {(selectedModel.accuracy)}%\r\n                       </span>\r\n                     </div>\r\n                   )}\r\n                 </div>\r\n"
                },
                {
                    "date": 1752231342660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -453,9 +453,9 @@\n                                     style={{ width: `${model.accuracy * 100}%` }}\r\n                                   />\r\n                                 </div>\r\n                                 <span className=\"font-medium text-gray-900\">\r\n-                                  {(model.accuracy * 100).toFixed(1)}%\r\n+                                  {(model.accuracy)}%\r\n                                 </span>\r\n                               </div>\r\n                             </div>\r\n                             \r\n"
                },
                {
                    "date": 1752231369136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -449,9 +449,9 @@\n                               <div className=\"flex items-center\">\r\n                                 <div className=\"w-full bg-gray-200 rounded-full h-2.5 mr-2\">\r\n                                   <div \r\n                                     className=\"bg-blue-600 h-2.5 rounded-full\" \r\n-                                    style={{ width: `${model.accuracy * 100}%` }}\r\n+                                    style={{ width: `${model.accuracy}%` }}\r\n                                   />\r\n                                 </div>\r\n                                 <span className=\"font-medium text-gray-900\">\r\n                                   {(model.accuracy)}%\r\n"
                },
                {
                    "date": 1752559007949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,9 @@\n   try {\r\n     // Prepare inputs in correct order\r\n     const inputValues = selectedModel.features.map(feature => {\r\n       const featureName = typeof feature === 'string' ? feature : feature.name;\r\n-      return parseFloat(predictionInputs[featureName]) || 0; // Convert to number\r\n+      return predictionInputs[featureName]; // Convert to number\r\n     });\r\n \r\n     // Get column names in correct order\r\n     const columns = selectedModel.features.map(f => typeof f === 'string' ? f : f.name);\r\n"
                },
                {
                    "date": 1752559880913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,12 @@\n   MdRefresh as RetrainIcon,\r\n   MdPlayArrow as PlayIcon,\r\n   MdDownload as DownloadIcon,\r\n   MdDelete as DeleteIcon,\r\n-  MdArrowBack as BackIcon  // Add this import\r\n+  MdArrowBack as BackIcon\r\n } from 'react-icons/md';\r\n+import { FiSearch, FiFilter } from 'react-icons/fi';\r\n \r\n-\r\n import Navbar from '../../components/Navbar';\r\n import Footer from '../../components/Footer';\r\n \r\n const SavedModels = () => {\r\n@@ -20,24 +20,26 @@\n   const [error, setError] = useState(null);\r\n   const [selectedModel, setSelectedModel] = useState(null);\r\n   const [predictionInputs, setPredictionInputs] = useState({});\r\n   const [predictionResult, setPredictionResult] = useState(null);\r\n-  const [inputTypes, setInputTypes] = useState({})\r\n-  const [categoricalOptions, setCategoricalOptions] = useState({})\r\n+  const [inputTypes, setInputTypes] = useState({});\r\n+  const [categoricalOptions, setCategoricalOptions] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState('');\r\n+  const [filterProblemType, setFilterProblemType] = useState('all');\r\n \r\n   const API_URL = import.meta.env.VITE_API_URL;\r\n   const accessToken = localStorage.getItem('access');\r\n \r\n   // Fetch saved models\r\n   useEffect(() => {\r\n     const fetchModels = async () => {\r\n       try {\r\n-      const response = await axios.get(`${API_URL}/file/save/`, {\r\n-      headers: {\r\n-        'Content-Type': 'application/json', // Correct content type\r\n-        'Authorization': `Bearer ${accessToken}`,\r\n-      }\r\n-    });\r\n+        const response = await axios.get(`${API_URL}/file/save/`, {\r\n+          headers: {\r\n+            'Content-Type': 'application/json',\r\n+            'Authorization': `Bearer ${accessToken}`,\r\n+          }\r\n+        });\r\n         console.log(response.data);\r\n         setModels(Array.isArray(response.data) ? response.data : []);\r\n         setError(null);\r\n       } catch (error) {\r\n@@ -50,9 +52,28 @@\n     };\r\n     fetchModels();\r\n   }, []);\r\n \r\n+  // Filter and search models\r\n+  const filteredModels = models.filter(model => {\r\n+    // Parse the config if it's a string\r\n+    const config = typeof model.config === 'string' ? JSON.parse(model.config) : model.config || {};\r\n+    \r\n+    // Search term matching\r\n+    const matchesSearch = \r\n+      model.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n+      model.algorithm.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n+      config.problem_type?.toLowerCase().includes(searchTerm.toLowerCase());\r\n+    \r\n+    // Problem type filtering\r\n+    const matchesProblemType = \r\n+      filterProblemType === 'all' || \r\n+      (config.problem_type && config.problem_type.toLowerCase() === filterProblemType);\r\n+    \r\n+    return matchesSearch && matchesProblemType;\r\n+  });\r\n \r\n+\r\n   // Download model as joblib file\r\n   const downloadModel = async (modelId) => {\r\n   try {\r\n     const model = models.find(model => model.id === modelId);\r\n"
                },
                {
                    "date": 1752559936718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,28 +425,63 @@\n             >\r\n               Create New Model\r\n             </Link>\r\n           </div>\r\n-          {models.length === 0 ? (\r\n+\r\n+          {/* Add Search and Filter UI */}\r\n+          <div className=\"mb-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+            <div className=\"relative\">\r\n+              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n+                <FiSearch className=\"text-gray-400\" />\r\n+              </div>\r\n+              <input\r\n+                type=\"text\"\r\n+                placeholder=\"Search by name, algorithm or type...\"\r\n+                className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n+                value={searchTerm}\r\n+                onChange={(e) => setSearchTerm(e.target.value)}\r\n+              />\r\n+            </div>\r\n+            \r\n+            <div className=\"flex items-center space-x-2\">\r\n+              <FiFilter className=\"text-gray-400\" />\r\n+              <select\r\n+                className=\"block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\r\n+                value={filterProblemType}\r\n+                onChange={(e) => setFilterProblemType(e.target.value)}\r\n+              >\r\n+                <option value=\"all\">All Problem Types</option>\r\n+                <option value=\"regression\">Regression</option>\r\n+                <option value=\"classification\">Classification</option>\r\n+              </select>\r\n+            </div>\r\n+          </div>\r\n+\r\n+          {filteredModels.length === 0 ? (\r\n             <div className=\"bg-white rounded-lg shadow-md p-8 text-center\">\r\n               <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                 <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n               </svg>\r\n-              <h3 className=\"mt-2 text-lg font-medium text-gray-900\">No models saved</h3>\r\n-              <p className=\"mt-1 text-gray-500\">You haven't saved any machine learning models yet.</p>\r\n-              <div className=\"mt-6\">\r\n-                <Link\r\n-                  to=\"/playground\"\r\n-                  className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n-                >\r\n-                  Create your first model\r\n-                </Link>\r\n-              </div>\r\n+              <h3 className=\"mt-2 text-lg font-medium text-gray-900\">No models found</h3>\r\n+              <p className=\"mt-1 text-gray-500\">\r\n+                {models.length === 0 \r\n+                  ? \"You haven't saved any machine learning models yet.\"\r\n+                  : \"No models match your search criteria.\"}\r\n+              </p>\r\n+              {models.length === 0 && (\r\n+                <div className=\"mt-6\">\r\n+                  <Link\r\n+                    to=\"/playground\"\r\n+                    className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n+                  >\r\n+                    Create your first model\r\n+                  </Link>\r\n+                </div>\r\n+              )}\r\n             </div>\r\n           ) : (\r\n             <div className=\"grid grid-cols-1 gap-6\">\r\n-              {models.map(model => {\r\n-                // Parse the config if it's a string\r\n+              {filteredModels.map(model => {\r\n                 const config = typeof model.config === 'string' \r\n                   ? JSON.parse(model.config) \r\n                   : model.config || {};\r\n                 \r\n@@ -533,14 +568,19 @@\n                       </div>\r\n                     </div>\r\n                     \r\n                     <div className=\"bg-gray-50 px-6 py-3 border-t border-gray-100\">\r\n-                      <div className=\"flex items-center justify-between text-sm\">\r\n+                      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between text-sm\">\r\n                         <div className=\"text-gray-500\">\r\n                           Model ID: <span className=\"font-mono text-gray-700\">{model.id}</span>\r\n+                          {config.training_time && (\r\n+                            <span className=\"ml-3\">\r\n+                              • Training Time: <span className=\"font-medium text-gray-700\">{config.training_time}s</span>\r\n+                            </span>\r\n+                          )}\r\n                         </div>\r\n                         {config.problem_type && (\r\n-                          <div className=\"text-gray-500\">\r\n+                          <div className=\"text-gray-500 mt-1 sm:mt-0\">\r\n                             Type: <span className=\"font-medium text-gray-700 capitalize\">{config.problem_type}</span>\r\n                           </div>\r\n                         )}\r\n                       </div>\r\n"
                },
                {
                    "date": 1752560070639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   // Filter and search models\r\n   const filteredModels = models.filter(model => {\r\n     // Parse the config if it's a string\r\n     const config = typeof model.config === 'string' ? JSON.parse(model.config) : model.config || {};\r\n-    \r\n+    print('Config in Filter:',config);\r\n     // Search term matching\r\n     const matchesSearch = \r\n       model.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n       model.algorithm.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n"
                },
                {
                    "date": 1752560091029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   // Filter and search models\r\n   const filteredModels = models.filter(model => {\r\n     // Parse the config if it's a string\r\n     const config = typeof model.config === 'string' ? JSON.parse(model.config) : model.config || {};\r\n-    print('Config in Filter:',config);\r\n+    console.log('Config in Filter:',config);\r\n     // Search term matching\r\n     const matchesSearch = \r\n       model.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n       model.algorithm.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n"
                },
                {
                    "date": 1752560195347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,14 +61,14 @@\n     // Search term matching\r\n     const matchesSearch = \r\n       model.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n       model.algorithm.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n-      config.problem_type?.toLowerCase().includes(searchTerm.toLowerCase());\r\n+      model.problem_type?.toLowerCase().includes(searchTerm.toLowerCase());\r\n     \r\n     // Problem type filtering\r\n     const matchesProblemType = \r\n       filterProblemType === 'all' || \r\n-      (config.problem_type && config.problem_type.toLowerCase() === filterProblemType);\r\n+      (model.problem_type && model.problem_type.toLowerCase() === filterProblemType);\r\n     \r\n     return matchesSearch && matchesProblemType;\r\n   });\r\n \r\n"
                },
                {
                    "date": 1752560220634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,11 +54,8 @@\n   }, []);\r\n \r\n   // Filter and search models\r\n   const filteredModels = models.filter(model => {\r\n-    // Parse the config if it's a string\r\n-    const config = typeof model.config === 'string' ? JSON.parse(model.config) : model.config || {};\r\n-    console.log('Config in Filter:',config);\r\n     // Search term matching\r\n     const matchesSearch = \r\n       model.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n       model.algorithm.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n"
                },
                {
                    "date": 1752560266004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -568,17 +568,17 @@\n                     <div className=\"bg-gray-50 px-6 py-3 border-t border-gray-100\">\r\n                       <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between text-sm\">\r\n                         <div className=\"text-gray-500\">\r\n                           Model ID: <span className=\"font-mono text-gray-700\">{model.id}</span>\r\n-                          {config.training_time && (\r\n+                          {model.training_time && (\r\n                             <span className=\"ml-3\">\r\n-                              • Training Time: <span className=\"font-medium text-gray-700\">{config.training_time}s</span>\r\n+                              • Training Time: <span className=\"font-medium text-gray-700\">{model.training_time}s</span>\r\n                             </span>\r\n                           )}\r\n                         </div>\r\n-                        {config.problem_type && (\r\n+                        {model.problem_type && (\r\n                           <div className=\"text-gray-500 mt-1 sm:mt-0\">\r\n-                            Type: <span className=\"font-medium text-gray-700 capitalize\">{config.problem_type}</span>\r\n+                            Type: <span className=\"font-medium text-gray-700 capitalize\">{model.problem_type}</span>\r\n                           </div>\r\n                         )}\r\n                       </div>\r\n                     </div>\r\n"
                }
            ],
            "date": 1752226724521,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { Toaster, toast } from 'sonner';\r\nimport { \r\n  MdRefresh as RetrainIcon,\r\n  MdPlayArrow as PlayIcon,\r\n  MdDownload as DownloadIcon,\r\n  MdDelete as DeleteIcon,\r\n  MdArrowBack as BackIcon  // Add this import\r\n} from 'react-icons/md';\r\n\r\n\r\nimport Navbar from '../../components/Navbar';\r\nimport Footer from '../../components/Footer';\r\n\r\nconst SavedModels = () => {\r\n  const [models, setModels] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  const [predictionInputs, setPredictionInputs] = useState({});\r\n  const [predictionResult, setPredictionResult] = useState(null);\r\n\r\n  const API_URL = import.meta.env.VITE_API_URL;\r\n  const accessToken = localStorage.getItem('access');\r\n\r\n  // Fetch saved models\r\n  useEffect(() => {\r\n    const fetchModels = async () => {\r\n      try {\r\n      const response = await axios.get(`${API_URL}/file/save/`, {\r\n      headers: {\r\n        'Content-Type': 'application/json', // Correct content type\r\n        'Authorization': `Bearer ${accessToken}`,\r\n      }\r\n    });\r\n        console.log(response.data);\r\n        setModels(Array.isArray(response.data) ? response.data : []);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Error fetching models:', error);\r\n        setError('Failed to load models. Please try again later.');\r\n        setModels([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchModels();\r\n  }, []);\r\n\r\n\r\n  // Download model as joblib file\r\n  const downloadModel = async (modelId) => {\r\n    try {\r\n      const response = await axios.get(`/api/download-model/${modelId}`, {\r\n        responseType: 'blob'\r\n      });\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', `model_${modelId}.joblib`);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n    } catch (error) {\r\n      console.error('Error downloading model:', error);\r\n      alert('Failed to download model. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Retrain model\r\n  const retrainModel = async (modelId) => {\r\n    try {\r\n      await axios.post(`/api/retrain-model/${modelId}`);\r\n      alert('Model retraining initiated! Check back later for the updated model.');\r\n    } catch (error) {\r\n      console.error('Error retraining model:', error);\r\n      alert('Failed to retrain model. Please try again.');\r\n    }\r\n  };\r\n\r\n\r\n  // Delete Model\r\nconst deleteModel = async (modelId) => {\r\n  if (window.confirm('Are you sure you want to permanently delete this model?')) {\r\n    try {\r\n      const response = await axios.delete(`${API_URL}/file/saved-model/${modelId}/`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${accessToken}`,\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n      \r\n      if (response.status === 204) {\r\n        setModels(models.filter(model => model.id !== modelId));\r\n        toast.success('Model deleted successfully');\r\n      } else {\r\n        throw new Error('Unexpected response from server');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting model:', error);\r\n      const errorMessage = error.response?.data?.error || \r\n                          error.response?.data?.message || \r\n                          'Failed to delete model. Please try again.';\r\n      toast.error(errorMessage);\r\n    }\r\n  }\r\n};\r\n\r\n  // Get model input features\r\n  const getModelFeatures = async (modelId) => {\r\n    try {\r\n      \r\n      const model = models.find(model => model.id === modelId);\r\n      if (!model) {\r\n        throw new Error('Model not found');\r\n      }\r\n      \r\n      console.log('Features:',model.features)\r\n\r\n      setSelectedModel({\r\n        ...model,\r\n        features: Array.isArray(model?.features) ? model.features : []\r\n      });\r\n      \r\n      // Initialize prediction inputs\r\n      const inputs = {};\r\n      model.features.forEach(feature => {\r\n        inputs[feature.name] = '';\r\n      });\r\n      setPredictionInputs(inputs);\r\n      setPredictionResult(null);\r\n    } catch (error) {\r\n      console.error('Error fetching model features:', error);\r\n      alert('Failed to load model details. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Handle prediction input change\r\n  const handleInputChange = (featureName, value) => {\r\n    setPredictionInputs(prev => ({\r\n      ...prev,\r\n      [featureName]: value\r\n    }));\r\n  };\r\n\r\n  // Make prediction\r\n  const makePrediction = async () => {\r\n    try {\r\n      // Prepare inputs\r\n      const inputs = {};\r\n      selectedModel.features.forEach(feature => {\r\n        const featureName = typeof feature === 'string' ? feature : feature.name;\r\n        inputs[featureName] = predictionInputs[featureName] || '';\r\n      });\r\n\r\n      const response = await axios.post(\r\n        `${API_URL}/file/predict/${selectedModel.id}/`,\r\n        { inputs },\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            'Content-Type': 'application/json',\r\n          }\r\n        }\r\n      );\r\n      \r\n      setPredictionResult(response.data.prediction);\r\n      console.log(response.data);\r\n\r\n    } catch (error) {\r\n      console.error('Prediction error:', error);\r\n      const errorMessage = error.response?.data?.error || \r\n                          error.response?.data?.message || \r\n                          'Failed to make prediction';\r\n      toast.error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        <div className=\"min-h-screen p-8 flex justify-center items-center\">\r\n          <div className=\"text-center\">\r\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-400 mx-auto mb-4\"></div>\r\n            <p className=\"text-gray-600\">Loading your saved models...</p>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        <div className=\"min-h-screen p-8 max-w-4xl mx-auto\">\r\n          <div className=\"bg-red-50 border-l-4 border-red-400 p-4 mb-6 rounded\">\r\n            <div className=\"flex items-start\">\r\n              <div className=\"flex-shrink-0\">\r\n                <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n              </div>\r\n              <div className=\"ml-3\">\r\n                <h3 className=\"text-sm font-medium text-red-800\">{error}</h3>\r\n                <button\r\n                  onClick={() => window.location.reload()}\r\n                  className=\"mt-2 text-sm text-red-700 hover:text-red-600 font-medium\"\r\n                >\r\n                  Retry\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n\r\n  // Model detail view\r\n  if (selectedModel) {\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        <div className=\"min-h-screen bg-gray-50\">\r\n          <div className=\"max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8\">\r\n            <button \r\n              onClick={() => setSelectedModel(null)}\r\n              className=\"flex items-center text-gray-600 hover:text-gray-900 mb-6\"\r\n            >\r\n              <BackIcon className=\"mr-1\" /> Back to all models\r\n            </button>\r\n            \r\n            <div className=\"bg-white shadow rounded-lg overflow-hidden\">\r\n              <div className=\"px-6 py-5 border-b border-gray-200\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <h2 className=\"text-2xl font-semibold text-gray-900\">{selectedModel.name}</h2>\r\n                    <p className=\"mt-1 text-sm text-gray-500\">\r\n                      {selectedModel.algorithm} • Created on {new Date(selectedModel.created_at).toLocaleDateString()}\r\n                    </p>\r\n                  </div>\r\n                  {selectedModel.accuracy && (\r\n                    <div className=\"bg-blue-50 px-3 py-1 rounded-full\">\r\n                      <span className=\"text-blue-800 font-medium\">\r\n                        Accuracy: {(selectedModel.accuracy * 100).toFixed(1)}%\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"px-6 py-6\">\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Make Prediction</h3>\r\n                \r\n                <div className=\"space-y-5\">\r\n                  {selectedModel.features?.map(feature => {\r\n                    const featureName = typeof feature === 'string' ? feature : feature.name;\r\n                    const featureType = selectedModel.config?.feature_types?.[featureName] || 'numeric';\r\n                    const isCategorical = featureType === 'categorical';\r\n\r\n                    return (\r\n                      <div key={featureName} className=\"grid grid-cols-1 gap-1 sm:grid-cols-3\">\r\n                        <label className=\"block text-sm font-medium text-gray-700 sm:col-span-1\">\r\n                          {featureName}\r\n                          <span className=\"text-gray-400 ml-1\">({featureType})</span>\r\n                        </label>\r\n                        <div className=\"sm:col-span-2\">\r\n                          {isCategorical ? (\r\n                            <select\r\n                              value={predictionInputs[featureName] || ''}\r\n                              onChange={(e) => handleInputChange(featureName, e.target.value)}\r\n                              className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n                            >\r\n                              <option value=\"\">Select option</option>\r\n                              <option value=\"Yes\">Yes</option>\r\n                              <option value=\"No\">No</option>\r\n                            </select>\r\n                          ) : (\r\n                            <input\r\n                              type=\"number\"\r\n                              value={predictionInputs[featureName] || ''}\r\n                              onChange={(e) => handleInputChange(featureName, e.target.value)}\r\n                              className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n                              placeholder={`Enter ${featureName}`}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  \r\n                  <div className=\"pt-2\">\r\n                    <button\r\n                      onClick={makePrediction}\r\n                      // disabled={Object.values(predictionInputs).some(val => val === '')}\r\n                      className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed hover:cursor-pointer\"\r\n                    >\r\n                      Predict\r\n                    </button>\r\n                  </div>\r\n                  \r\n                  {predictionResult !== null && (\r\n                    <div className=\"mt-6 p-4 bg-gray-50 rounded-md border border-gray-200\">\r\n                      <h4 className=\"text-sm font-medium text-gray-700 mb-1\">Prediction Result</h4>\r\n                      <div className=\"text-xl font-semibold text-blue-600\">\r\n                        {predictionResult}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n\r\n  // Main view with model cards\r\n  return (\r\n    <>\r\n      <Toaster position=\"top-right\" />\r\n      <Navbar />\r\n      <div className=\"min-h-screen bg-gray-50\">\r\n        <div className=\"max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8\">\r\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8\">\r\n            <div className=\"mb-4 sm:mb-0\">\r\n              <h1 className=\"text-2xl font-semibold text-gray-900\">Your Saved Models</h1>\r\n              <p className=\"mt-1 text-sm text-gray-500\">\r\n                View and manage your trained machine learning models\r\n              </p>\r\n            </div>\r\n            <Link \r\n              to=\"/playground\" \r\n              className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n            >\r\n              Create New Model\r\n            </Link>\r\n          </div>\r\n          {models.length === 0 ? (\r\n            <div className=\"bg-white rounded-lg shadow-md p-8 text-center\">\r\n              <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n              </svg>\r\n              <h3 className=\"mt-2 text-lg font-medium text-gray-900\">No models saved</h3>\r\n              <p className=\"mt-1 text-gray-500\">You haven't saved any machine learning models yet.</p>\r\n              <div className=\"mt-6\">\r\n                <Link\r\n                  to=\"/playground\"\r\n                  className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n                >\r\n                  Create your first model\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"grid grid-cols-1 gap-6\">\r\n              {models.map(model => {\r\n                // Parse the config if it's a string\r\n                const config = typeof model.config === 'string' \r\n                  ? JSON.parse(model.config) \r\n                  : model.config || {};\r\n                \r\n                return (\r\n                  <div key={`model-${model.id}`} className=\"bg-white rounded-xl shadow-lg overflow-hidden border border-gray-100 hover:shadow-xl transition-shadow duration-300\">\r\n                    <div className=\"p-6\">\r\n                      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\r\n                        <div className=\"flex-1\">\r\n                          <div className=\"flex items-center gap-3 mb-3\">\r\n                            <h3 className=\"text-xl font-bold text-gray-900\">\r\n                              {config.name || model.name || 'Untitled Model'}\r\n                            </h3>\r\n                            <span className=\"px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800\">\r\n                              {model.algorithm}\r\n                            </span>\r\n                          </div>\r\n                          \r\n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n                            <div className=\"space-y-1\">\r\n                              <div className=\"text-gray-500\">Accuracy</div>\r\n                              <div className=\"flex items-center\">\r\n                                <div className=\"w-full bg-gray-200 rounded-full h-2.5 mr-2\">\r\n                                  <div \r\n                                    className=\"bg-blue-600 h-2.5 rounded-full\" \r\n                                    style={{ width: `${model.accuracy * 100}%` }}\r\n                                  />\r\n                                </div>\r\n                                <span className=\"font-medium text-gray-900\">\r\n                                  {(model.accuracy * 100).toFixed(1)}%\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"space-y-1\">\r\n                              <div className=\"text-gray-500\">Created</div>\r\n                              <div className=\"font-medium text-gray-900\">\r\n                                {new Date(model.created_at).toLocaleDateString('en-US', {\r\n                                  year: 'numeric',\r\n                                  month: 'short',\r\n                                  day: 'numeric'\r\n                                })}\r\n                              </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"space-y-1\">\r\n                              <div className=\"text-gray-500\">Features</div>\r\n                              <div className=\"font-medium text-gray-900\">\r\n                                {model.features?.length || 'N/A'}\r\n                              </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"space-y-1\">\r\n                              <div className=\"text-gray-500\">Target</div>\r\n                              <div className=\"font-medium text-gray-900\">\r\n                                {model.target_column || 'N/A'}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"flex flex-col sm:flex-row md:flex-col lg:flex-row gap-2\">\r\n                          <button\r\n                            onClick={() => getModelFeatures(model.id)}\r\n                            className=\"flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors gap-2 hover:cursor-pointer\"\r\n                          >\r\n                            <PlayIcon className=\"w-4 h-4\" />\r\n                            <span>Predict</span>\r\n                          </button>\r\n                          <button\r\n                            onClick={() => downloadModel(model.id)}\r\n                            className=\"flex items-center justify-center px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors gap-2 hover:cursor-pointer\"\r\n                          >\r\n                            <DownloadIcon className=\"w-4 h-4\" />\r\n                            <span>Download</span>\r\n                          </button>\r\n                          <button\r\n                            onClick={() => deleteModel(model.id)}\r\n                            className=\"flex items-center justify-center px-4 py-2 bg-red-50 border border-red-100 text-red-600 rounded-lg hover:bg-red-100 transition-colors gap-2 hover:cursor-pointer\"\r\n                          >\r\n                            <DeleteIcon className=\"w-4 h-4\" />\r\n                            <span>Delete</span>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"bg-gray-50 px-6 py-3 border-t border-gray-100\">\r\n                      <div className=\"flex items-center justify-between text-sm\">\r\n                        <div className=\"text-gray-500\">\r\n                          Model ID: <span className=\"font-mono text-gray-700\">{model.id}</span>\r\n                        </div>\r\n                        {config.problem_type && (\r\n                          <div className=\"text-gray-500\">\r\n                            Type: <span className=\"font-medium text-gray-700 capitalize\">{config.problem_type}</span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedModels;"
        }
    ]
}