{
    "sourceFile": "src/pages/Playground/Playground.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752222209052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752222315672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1510,9 +1510,9 @@\n                 <div className=\"pt-4\">\r\n                   <button\r\n                     type=\"submit\"\r\n                     disabled={isLoading || !formData.target_column || formData.features.length === 0 || !formData.model_type}\r\n-                    className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-[var(--color-primary-600)] to-[var(--color-accent-500)] hover:from-[var(--color-primary-700)] hover:to-[var(--color-accent-600)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--color-primary-500)] transition ${\r\n+                    className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-[var(--color-primary-600)] to-[var(--color-accent-500)] hover:from-[var(--color-primary-700)] hover:cursor-pointer hover:to-[var(--color-accent-600)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--color-primary-500)] transition ${\r\n                       isLoading || !formData.target_column || formData.features.length === 0 || !formData.model_type ? 'opacity-50 cursor-not-allowed' : ''\r\n                     }`}\r\n                   >\r\n                     {isLoading ? (\r\n"
                },
                {
                    "date": 1752222470570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -742,9 +742,10 @@\n         (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n         targetType\r\n     };\r\n     formDataToSend.append('config', JSON.stringify(config));\r\n-\r\n+    console.log('Training request data:',formDataToSend);\r\n+    \r\n     const response = await axios.post(`${API_URL}/file/train/`, formDataToSend, {\r\n       headers: {\r\n         'Content-Type': 'multipart/form-data',\r\n         'Authorization': `Bearer ${accessToken}`,\r\n"
                },
                {
                    "date": 1752222579174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -741,11 +741,13 @@\n       problem_type: targetType === 'both' ? \r\n         (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n         targetType\r\n     };\r\n+    console.log('Config:'config);\r\n+    \r\n     formDataToSend.append('config', JSON.stringify(config));\r\n     console.log('Training request data:',formDataToSend);\r\n-    \r\n+\r\n     const response = await axios.post(`${API_URL}/file/train/`, formDataToSend, {\r\n       headers: {\r\n         'Content-Type': 'multipart/form-data',\r\n         'Authorization': `Bearer ${accessToken}`,\r\n"
                },
                {
                    "date": 1752222752332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -734,20 +734,22 @@\n   try {\r\n     const formDataToSend = new FormData();\r\n     formDataToSend.append('dataset', dataset);\r\n     formDataToSend.append('name', fileDisplayName);\r\n-    \r\n-    const config = {\r\n-      ...formData,\r\n-      problem_type: targetType === 'both' ? \r\n-        (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n-        targetType\r\n-    };\r\n-    console.log('Config:'config);\r\n-    \r\n-    formDataToSend.append('config', JSON.stringify(config));\r\n-    console.log('Training request data:',formDataToSend);\r\n+    // Validate required fields\r\n+    if (!config.target_column || config.features.length === 0) {\r\n+      throw new Error('Target column and features must be specified');\r\n+    }\r\n \r\n+    // Stringify config with proper error handling\r\n+    try {\r\n+      formDataToSend.append('config', JSON.stringify(config));\r\n+    } catch (e) {\r\n+      throw new Error('Failed to serialize configuration');\r\n+    }\r\n+\r\n+    console.log('Sending config:', config);\r\n+\r\n     const response = await axios.post(`${API_URL}/file/train/`, formDataToSend, {\r\n       headers: {\r\n         'Content-Type': 'multipart/form-data',\r\n         'Authorization': `Bearer ${accessToken}`,\r\n"
                },
                {
                    "date": 1752222818661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -734,8 +734,16 @@\n   try {\r\n     const formDataToSend = new FormData();\r\n     formDataToSend.append('dataset', dataset);\r\n     formDataToSend.append('name', fileDisplayName);\r\n+    \r\n+    const config = {\r\n+      ...formData,\r\n+      problem_type: targetType === 'both' ? \r\n+        (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n+        targetType\r\n+    };\r\n+    \r\n     // Validate required fields\r\n     if (!config.target_column || config.features.length === 0) {\r\n       throw new Error('Target column and features must be specified');\r\n     }\r\n"
                },
                {
                    "date": 1752222927404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -741,9 +741,9 @@\n       problem_type: targetType === 'both' ? \r\n         (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n         targetType\r\n     };\r\n-    \r\n+\r\n     // Validate required fields\r\n     if (!config.target_column || config.features.length === 0) {\r\n       throw new Error('Target column and features must be specified');\r\n     }\r\n@@ -834,8 +834,9 @@\n       encoder_cache_key: results.encoder_cache_key,\r\n       scaler_cache_key: results.scaler_cache_key,\r\n       target_encoder_cache_key: results.target_encoder_cache_key,\r\n       dataset: results.dataset,\r\n+      accuracy: results.accuracy,\r\n       config: JSON.stringify(saveConfig) // Stringify the config object\r\n     };\r\n \r\n     const response = await axios.post(`${API_URL}/file/save/`, payload, {\r\n"
                },
                {
                    "date": 1752223261020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -819,15 +819,15 @@\n   // Save trained model\r\n const handleSaveModel = async () => {\r\n   try {\r\n     // Prepare the config object with all required fields\r\n-    const saveConfig = {\r\n-      ...formData,\r\n-      accuracy: results.accuracy, // Make sure to include accuracy\r\n-      problem_type: targetType === 'both' ? \r\n-        (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n-        targetType\r\n-    };\r\n+    // const saveConfig = {\r\n+    //   ...formData,\r\n+    //   accuracy: results.accuracy, // Make sure to include accuracy\r\n+    //   problem_type: targetType === 'both' ? \r\n+    //     (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n+    //     targetType\r\n+    // };\r\n \r\n     const payload = {\r\n       name: results.name,\r\n       model_cache_key: results.model_cache_key,\r\n@@ -835,9 +835,9 @@\n       scaler_cache_key: results.scaler_cache_key,\r\n       target_encoder_cache_key: results.target_encoder_cache_key,\r\n       dataset: results.dataset,\r\n       accuracy: results.accuracy,\r\n-      config: JSON.stringify(saveConfig) // Stringify the config object\r\n+      config: results.config // Stringify the config object\r\n     };\r\n \r\n     const response = await axios.post(`${API_URL}/file/save/`, payload, {\r\n       headers: {\r\n"
                },
                {
                    "date": 1752223346778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -826,9 +826,8 @@\n     //   problem_type: targetType === 'both' ? \r\n     //     (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n     //     targetType\r\n     // };\r\n-\r\n     const payload = {\r\n       name: results.name,\r\n       model_cache_key: results.model_cache_key,\r\n       encoder_cache_key: results.encoder_cache_key,\r\n@@ -838,8 +837,10 @@\n       accuracy: results.accuracy,\r\n       config: results.config // Stringify the config object\r\n     };\r\n \r\n+    console.log('Saved payload',payload);\r\n+\r\n     const response = await axios.post(`${API_URL}/file/save/`, payload, {\r\n       headers: {\r\n         'Content-Type': 'application/json', // Correct content type\r\n         'Authorization': `Bearer ${accessToken}`,\r\n"
                }
            ],
            "date": 1752222209052,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { ExclamationTriangleIcon } from '@heroicons/react/24/outline';\r\nimport { \r\n  MdKeyboardArrowDown as ChevronDownIcon,\r\n  MdOutlineInsertDriveFile as DocumentTextIcon,\r\n  MdClose as XMarkIcon,\r\n  MdBarChart as ChartBarIcon,\r\n  MdScatterPlot as ScatterPlotIcon,\r\n  MdTableChart as TableIcon,\r\n  MdPieChart as PieChartIcon,\r\n  MdShowChart as LineChartIcon,\r\n  MdGridOn as HeatmapIcon\r\n} from 'react-icons/md';\r\nimport Select from \"react-select\";\r\nimport { Bar, Line, Pie, Scatter } from 'react-chartjs-2';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport Heatmap from 'react-heatmap-grid';\r\n\r\nimport Navbar from '../../components/Navbar';\r\nimport Footer from '../../components/Footer';\r\nimport { toast } from 'sonner';\r\n\r\nChart.register(...registerables);\r\n\r\n// Visualization options\r\nconst visualizationOptions = [\r\n  { value: 'preview', label: 'Preview', icon: <TableIcon className=\"w-4 h-4 mr-2\" /> },\r\n  { value: 'stats', label: 'Statistics', icon: <TableIcon className=\"w-4 h-4 mr-2\" /> },\r\n  { value: 'histogram', label: 'Histogram', icon: <ChartBarIcon className=\"w-4 h-4 mr-2\" /> },\r\n  { value: 'bar', label: 'Bar Chart', icon: <ChartBarIcon className=\"w-4 h-4 mr-2\" /> },\r\n  { value: 'scatter', label: 'Scatter Plot', icon: <ScatterPlotIcon className=\"w-4 h-4 mr-2\" /> },\r\n  { value: 'pie', label: 'Pie Chart', icon: <PieChartIcon className=\"w-4 h-4 mr-2\" /> },\r\n  { value: 'line', label: 'Line Chart', icon: <LineChartIcon className=\"w-4 h-4 mr-2\" /> },\r\n  { value: 'heatmap', label: 'Heatmap', icon: <HeatmapIcon className=\"w-4 h-4 mr-2\" /> }\r\n];\r\n\r\n// Row count options for preview\r\nconst rowCountOptions = [\r\n  { value: 5, label: '5 rows' },\r\n  { value: 10, label: '10 rows' },\r\n  { value: 25, label: '25 rows' },\r\n  { value: 50, label: '50 rows' },\r\n  { value: 100, label: '100 rows' }\r\n];\r\n\r\n// Model options\r\nconst modelOptions = {\r\n  classification: {\r\n    'RandomForestClassifier': {\r\n      displayName: 'Random Forest Classifier',\r\n      parameters: {\r\n        n_estimators: { type: 'number', value: 100, min: 1, max: 1000 },\r\n        max_depth: { type: 'number', value: '', min: 1, max: 20, placeholder: 'None' },\r\n        min_samples_split: { type: 'number', value: 2, min: 2, max: 20 },\r\n        min_samples_leaf: { type: 'number', value: 1, min: 1, max: 20 },\r\n        criterion: { type: 'select', value: 'gini', options: ['gini', 'entropy'] }\r\n      },\r\n    },\r\n    'KNeighborsClassifier': {\r\n      displayName: 'K-Nearest Neighbors Classifier',\r\n      parameters: {\r\n        n_neighbors: { type: 'number', value: 5, min: 1, max: 50 },\r\n        weights: { type: 'select', value: 'uniform', options: ['uniform', 'distance'] },\r\n        algorithm: { type: 'select', value: 'auto', options: ['auto', 'ball_tree', 'kd_tree', 'brute'] }\r\n      },\r\n    },\r\n    'DecisionTreeClassifier': {\r\n      displayName: 'Decision Tree Classifier',\r\n      parameters: {\r\n        max_depth: { type: 'number', value: '', min: 1, max: 20, placeholder: 'None' },\r\n        min_samples_split: { type: 'number', value: 2, min: 2, max: 20 },\r\n        min_samples_leaf: { type: 'number', value: 1, min: 1, max: 20 },\r\n        criterion: { type: 'select', value: 'gini', options: ['gini', 'entropy'] }\r\n      },\r\n    },\r\n    'LogisticRegression': {\r\n      displayName: 'Logistic Regression',\r\n      parameters: {\r\n        C: { type: 'number', value: 1.0, min: 0.01, max: 10, step: 0.01 },\r\n        penalty: { type: 'select', value: 'l2', options: ['l2', 'l1', 'elasticnet', 'none'] },\r\n        solver: { type: 'select', value: 'lbfgs', options: ['lbfgs', 'liblinear', 'newton-cg', 'sag', 'saga'] },\r\n        max_iter: { type: 'number', value: 100, min: 50, max: 1000 }\r\n      },\r\n    },\r\n    'SVC': {\r\n      displayName: 'Support Vector Classifier',\r\n      parameters: {\r\n        C: { type: 'number', value: 1.0, min: 0.01, max: 10, step: 0.01 },\r\n        kernel: { type: 'select', value: 'rbf', options: ['linear', 'poly', 'rbf', 'sigmoid'] },\r\n        gamma: { type: 'select', value: 'scale', options: ['scale', 'auto'] }\r\n      },\r\n    }\r\n  },\r\n  regression: {\r\n    'RandomForestRegressor': {\r\n      displayName: 'Random Forest Regressor',\r\n      parameters: {\r\n        n_estimators: { type: 'number', value: 100, min: 1, max: 1000 },\r\n        max_depth: { type: 'number', value: '', min: 1, max: 20, placeholder: 'None' },\r\n        min_samples_split: { type: 'number', value: 2, min: 2, max: 20 },\r\n        min_samples_leaf: { type: 'number', value: 1, min: 1, max: 20 }\r\n      },\r\n    },\r\n    'KNeighborsRegressor': {\r\n      displayName: 'K-Nearest Neighbors Regressor',\r\n      parameters: {\r\n        n_neighbors: { type: 'number', value: 5, min: 1, max: 50 },\r\n        weights: { type: 'select', value: 'uniform', options: ['uniform', 'distance'] },\r\n        algorithm: { type: 'select', value: 'auto', options: ['auto', 'ball_tree', 'kd_tree', 'brute'] }\r\n      },\r\n    },\r\n    'DecisionTreeRegressor': {\r\n      displayName: 'Decision Tree Regressor',\r\n      parameters: {\r\n        max_depth: { type: 'number', value: '', min: 1, max: 20, placeholder: 'None' },\r\n        min_samples_split: { type: 'number', value: 2, min: 2, max: 20 },\r\n        min_samples_leaf: { type: 'number', value: 1, min: 1, max: 20 }\r\n      },\r\n    },\r\n    'LinearRegression': {\r\n      displayName: 'Linear Regression',\r\n      parameters: {},\r\n    },\r\n    'Ridge': {\r\n      displayName: 'Ridge Regression',\r\n      parameters: {\r\n        alpha: { type: 'number', value: 1.0, min: 0.01, max: 10, step: 0.01 }\r\n      },\r\n    },\r\n    'SVR': {\r\n      displayName: 'Support Vector Regressor',\r\n      parameters: {\r\n        C: { type: 'number', value: 1.0, min: 0.01, max: 10, step: 0.01 },\r\n        kernel: { type: 'select', value: 'rbf', options: ['linear', 'poly', 'rbf', 'sigmoid'] },\r\n        epsilon: { type: 'number', value: 0.1, min: 0.01, max: 1, step: 0.01 }\r\n      },\r\n    }\r\n  }\r\n};\r\n\r\n// Custom Confusion Matrix Component\r\nconst ConfusionMatrix = ({ matrix, labels }) => {\r\n  if (!matrix || !labels) return null;\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"min-w-full border border-gray-300\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"border border-gray-300 p-2 bg-gray-100\"></th>\r\n            {labels.map((label, i) => (\r\n              <th key={i} className=\"border border-gray-300 p-2 bg-gray-100 text-sm font-medium text-gray-700\">\r\n                Predicted {label}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {matrix.map((row, i) => (\r\n            <tr key={i}>\r\n              <td className=\"border border-gray-300 p-2 bg-gray-100 text-sm font-medium text-gray-700\">\r\n                Actual {labels[i]}\r\n              </td>\r\n              {row.map((cell, j) => (\r\n                <td \r\n                  key={j} \r\n                  className={`border border-gray-300 p-2 text-center text-sm ${\r\n                    i === j ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'\r\n                  }`}\r\n                >\r\n                  {cell}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Playground = () => {\r\n  // State for uploaded file and parsed data\r\n  const [dataset, setDataset] = useState(null);\r\n  const [fileName, setFileName] = useState('');\r\n  const [fileDisplayName, setFileDisplayName] = useState('');\r\n  const [accuracyScore, setAccuracyScore] = useState({})\r\n  const [columns, setColumns] = useState([]);\r\n  const [previewData, setPreviewData] = useState([]);\r\n  const [previewRowCount, setPreviewRowCount] = useState(5);\r\n  const [columnTypes, setColumnTypes] = useState({});\r\n  const [targetType, setTargetType] = useState(null);\r\n  const [datasetStats, setDatasetStats] = useState({});\r\n  const [showVisualization, setShowVisualization] = useState('preview');\r\n  const [selectedColumn, setSelectedColumn] = useState(null);\r\n  const [selectedColumn2, setSelectedColumn2] = useState(null);\r\n  const [chartData, setChartData] = useState(null);\r\n  const [correlationMatrix, setCorrelationMatrix] = useState(null);\r\n  const [isLoadingPreview, setIsLoadingPreview] = useState(false);\r\n  const [isLoadingStats, setIsLoadingStats] = useState(false);\r\n  const [isLoadingCorrelation, setIsLoadingCorrelation] = useState(false);\r\n\r\n  const API_URL = import.meta.env.VITE_API_URL;\r\n  const accessToken = localStorage.getItem('access');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // Form state\r\n  const [formData, setFormData] = useState({\r\n    features: [],\r\n    target_column: null,\r\n    encoder: 'LabelEncoder',\r\n    scaler: 'StandardScaler',\r\n    test_size: 0.25,\r\n    random_state: 42,\r\n    stratify: false,\r\n    model_type: null,\r\n    parameters: {},\r\n  });\r\n  \r\n  // Results\r\n  const [results, setResults] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [featureImportance, setFeatureImportance] = useState({});\r\n  const [confusionMatrix, setConfusionMatrix] = useState(null);\r\n\r\n  // Fetch preview data from backend\r\n  const fetchPreviewData = async (rowCount) => {\r\n    if (!dataset) return;\r\n    \r\n    setIsLoadingPreview(true);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('dataset', dataset);\r\n      formData.append('row_count', rowCount);\r\n      \r\n      const response = await axios.post(`${API_URL}/file/dataset-preview/`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n\r\n      console.log('File data:',response.data);\r\n      console.log('stats: ',response.data.stats);\r\n\r\n      if (response.data.error) {\r\n        throw new Error(response.data.error);\r\n      }\r\n      \r\n      // Destructure and set state in one operation\r\n      const { \r\n      data = [], \r\n      columns = [], \r\n      column_types = {}, \r\n      stats = {},\r\n      corr = {}\r\n    } = response.data;\r\n\r\n    // Set all state at once to prevent stale closures\r\n    setPreviewData(data);\r\n    setColumns(columns);\r\n    setColumnTypes(column_types);\r\n    setDatasetStats(stats); // This will now contain your stats\r\n    setCorrelationMatrix(corr);\r\n    // Verify stats immediately\r\n    console.log('Stats after set:', stats);\r\n    } catch (err) {\r\n      console.error('Error fetching preview data:', err);\r\n      setError(`Failed to load preview: ${err.message}`);\r\n    } finally {\r\n      setIsLoadingPreview(false);\r\n    }\r\n  };\r\n\r\n  // // Fetch correlation matrix from backend\r\n  // const fetchCorrelationMatrix = async () => {\r\n  //   if (!dataset) return;\r\n    \r\n  //   setIsLoadingCorrelation(true);\r\n  //   try {\r\n  //     const formData = new FormData();\r\n  //     formData.append('dataset', dataset);\r\n      \r\n  //     const response = await axios.post(`${API_URL}/file/dataset-correlation/`, formData, {\r\n  //       headers: {\r\n  //         'Content-Type': 'multipart/form-data'\r\n  //       }\r\n  //     });\r\n      \r\n  //     setCorrelationMatrix(response.data);\r\n  //   } catch (err) {\r\n  //     console.error('Error fetching correlation matrix:', err);\r\n  //     setError(`Failed to load correlation matrix: ${err.message}`);\r\n  //   } finally {\r\n  //     setIsLoadingCorrelation(false);\r\n  //   }\r\n  // };\r\n\r\n  // Handle row count change for preview\r\n  const handleRowCountChange = (option) => {\r\n    setPreviewRowCount(option.value);\r\n    fetchPreviewData(option.value);\r\n  };\r\n\r\n  // Generate chart data based on selected visualization\r\n  const generateChartData = (type, column, column2 = null) => {\r\n    if (!column || !previewData.length) return null;\r\n    \r\n    // Check column types for the selected columns\r\n    const col1Type = columnTypes[column];\r\n    const col2Type = column2 ? columnTypes[column2] : null;\r\n\r\n    // For pie chart, only allow categorical or mixed columns\r\n    if (type === 'pie' && col1Type !== 'categorical' && col1Type !== 'numeric-categorical') {\r\n      return null;\r\n    }\r\n\r\n    // For histogram, only allow numeric columns\r\n    if (type === 'histogram' && col1Type !== 'numeric') {\r\n      return null;\r\n    }\r\n\r\n    // For heatmap, return the correlation matrix data\r\n    if (type === 'heatmap' && correlationMatrix) {\r\n      const numericColumns = columns.filter(col => columnTypes[col] === 'numeric');\r\n      if (numericColumns.length === 0) return null;\r\n      \r\n      return {\r\n        xLabels: numericColumns,\r\n        yLabels: numericColumns,\r\n        data: numericColumns.map(col1 => \r\n          numericColumns.map(col2 => correlationMatrix[col1]?.[col2] || 0)\r\n        )\r\n      };\r\n    }\r\n\r\n    // For other chart types, handle data preparation\r\n    const numericValues = previewData\r\n      .map(row => parseFloat(row[column]))\r\n      .filter(val => !isNaN(val));\r\n    \r\n    if (!numericValues.length) return null;\r\n\r\n    // For pie chart, use actual values as labels\r\n    if (type === 'pie') {\r\n      const pieLabels = previewData.map(row => row[column]).slice(0, numericValues.length);\r\n      const valueCounts = {};\r\n      \r\n      pieLabels.forEach(label => {\r\n        valueCounts[label] = (valueCounts[label] || 0) + 1;\r\n      });\r\n      \r\n      return {\r\n        labels: Object.keys(valueCounts),\r\n        datasets: [{\r\n          data: Object.values(valueCounts),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.7)',\r\n            'rgba(54, 162, 235, 0.7)',\r\n            'rgba(255, 206, 86, 0.7)',\r\n            'rgba(75, 192, 192, 0.7)',\r\n            'rgba(153, 102, 255, 0.7)',\r\n          ],\r\n          borderWidth: 1\r\n        }]\r\n      };\r\n    }\r\n\r\n    // For bar/scatter with two columns\r\n    let numericValues2 = [];\r\n    if (column2) {\r\n      numericValues2 = previewData\r\n        .map(row => parseFloat(row[column2]))\r\n        .filter(val => !isNaN(val));\r\n    }\r\n\r\n    switch (type) {\r\n      case 'histogram':\r\n        return {\r\n          labels: Array.from({ length: 10 }, (_, i) => `Bin ${i + 1}`),\r\n          datasets: [{\r\n            label: column,\r\n            data: numericValues,\r\n            backgroundColor: 'rgba(79, 70, 229, 0.7)',\r\n            borderColor: 'rgba(79, 70, 229, 1)',\r\n            borderWidth: 1\r\n          }]\r\n        };\r\n\r\n      case 'bar':\r\n        if (column2) {\r\n          return {\r\n            labels: previewData.map((_, i) => `Row ${i + 1}`).slice(0, Math.min(numericValues.length, numericValues2.length)),\r\n            datasets: [\r\n              {\r\n                label: column,\r\n                data: numericValues.slice(0, numericValues2.length),\r\n                backgroundColor: 'rgba(54, 162, 235, 0.7)',\r\n                borderColor: 'rgba(54, 162, 235, 1)',\r\n                borderWidth: 1\r\n              },\r\n              {\r\n                label: column2,\r\n                data: numericValues2.slice(0, numericValues.length),\r\n                backgroundColor: 'rgba(255, 99, 132, 0.7)',\r\n                borderColor: 'rgba(255, 99, 132, 1)',\r\n                borderWidth: 1\r\n              }\r\n            ]\r\n          };\r\n        } else {\r\n          return {\r\n            labels: previewData.map((_, i) => `Row ${i + 1}`).slice(0, numericValues.length),\r\n            datasets: [{\r\n              label: column,\r\n              data: numericValues,\r\n              backgroundColor: 'rgba(54, 162, 235, 0.7)',\r\n              borderColor: 'rgba(54, 162, 235, 1)',\r\n              borderWidth: 1\r\n            }]\r\n          };\r\n        }\r\n\r\n      case 'scatter':\r\n        if (column2) {\r\n          return {\r\n            datasets: [{\r\n              label: `${column} vs ${column2}`,\r\n              data: numericValues.map((value, index) => ({\r\n                x: value,\r\n                y: numericValues2[index] || 0\r\n              })),\r\n              backgroundColor: 'rgba(255, 99, 132, 0.7)',\r\n              pointRadius: 6\r\n            }]\r\n          };\r\n        } else {\r\n          return {\r\n            datasets: [{\r\n              label: column,\r\n              data: numericValues.map((value, index) => ({\r\n                x: index,\r\n                y: value\r\n              })),\r\n              backgroundColor: 'rgba(255, 99, 132, 0.7)',\r\n              pointRadius: 6\r\n            }]\r\n          };\r\n        }\r\n\r\n      case 'line':\r\n        if (column2) {\r\n          return {\r\n            labels: previewData.map((_, i) => `Row ${i + 1}`).slice(0, Math.min(numericValues.length, numericValues2.length)),\r\n            datasets: [\r\n              {\r\n                label: column,\r\n                data: numericValues.slice(0, numericValues2.length),\r\n                borderColor: 'rgba(54, 162, 235, 1)',\r\n                backgroundColor: 'rgba(54, 162, 235, 0.1)',\r\n                tension: 0.1,\r\n                fill: true\r\n              },\r\n              {\r\n                label: column2,\r\n                data: numericValues2.slice(0, numericValues.length),\r\n                borderColor: 'rgba(255, 99, 132, 1)',\r\n                backgroundColor: 'rgba(255, 99, 132, 0.1)',\r\n                tension: 0.1,\r\n                fill: true\r\n              }\r\n            ]\r\n          };\r\n        } else {\r\n          return {\r\n            labels: previewData.map((_, i) => `Row ${i + 1}`).slice(0, numericValues.length),\r\n            datasets: [{\r\n              label: column,\r\n              data: numericValues,\r\n              borderColor: 'rgba(54, 162, 235, 1)',\r\n              backgroundColor: 'rgba(54, 162, 235, 0.1)',\r\n              tension: 0.1,\r\n              fill: true\r\n            }]\r\n          };\r\n        }\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  // Handle column selection with type validation\r\n  const handleColumnSelect = (column) => {\r\n    const colType = columnTypes[column];\r\n    \r\n    // Validate based on visualization type\r\n    switch (showVisualization) {\r\n      case 'histogram':\r\n        if (colType !== 'numeric') return;\r\n        break;\r\n      case 'pie':\r\n        if (colType !== 'categorical' && colType !== 'numeric-categorical') return;\r\n        break;\r\n      case 'bar':\r\n      case 'scatter':\r\n      case 'line':\r\n        // Allow any type for these visualizations\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    \r\n    setSelectedColumn(column);\r\n    setChartData(generateChartData(showVisualization, column, selectedColumn2));\r\n  };\r\n\r\n  // Handle second column selection for comparison charts\r\n  const handleColumn2Select = (column) => {\r\n    setSelectedColumn2(column);\r\n    setChartData(generateChartData(showVisualization, selectedColumn, column));\r\n  };\r\n\r\n  // 2. Update your useEffect hooks like this:\r\n    useEffect(() => {\r\n      if (!dataset) {\r\n        setDatasetStats({}); // Clear stats when dataset changes\r\n        return;\r\n      }\r\n\r\n      // This will fetch data whenever dataset or previewRowCount changes\r\n      fetchPreviewData(previewRowCount);\r\n    }, [dataset, previewRowCount]);\r\n\r\n  // Handle dataset upload\r\n  const handleDatasetUpload = async (e) => {\r\n    const uploadedDataset = e.target.files[0];\r\n    if (!uploadedDataset) return;\r\n    \r\n    setDataset(uploadedDataset);\r\n    setFileName(uploadedDataset.name);\r\n    setFileDisplayName(uploadedDataset.name.replace(/\\.[^/.]+$/, \"\"));\r\n    setTargetType(null);\r\n    setDatasetStats({});\r\n    setAccuracyScore({});\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      target_column: '',\r\n      features: []\r\n    }));\r\n    \r\n    // Fetch initial preview data\r\n    fetchPreviewData(previewRowCount);\r\n  };\r\n\r\n// Remove Dataset\r\nconst removeDataset = () => {\r\n  setDataset(null);\r\n  setFileName('');\r\n  setFileDisplayName('');\r\n  setColumns([]);\r\n  setPreviewData([]);\r\n  setColumnTypes({});\r\n  setTargetType(null);\r\n  // Reset all training-related states\r\n  setDatasetStats(null);\r\n  setResults(null);\r\n  setAccuracyScore({});\r\n  setFeatureImportance(null);\r\n  setConfusionMatrix(null);\r\n  setFormData(prev => ({\r\n    ...prev,\r\n    target_column: '',\r\n    features: [],\r\n    model_type: null,\r\n    parameters: {}\r\n  }));\r\n};\r\n\r\n\r\nconst handleChange = (e) => {\r\n  const { name, value, type, checked } = e.target;\r\n\r\n  setFormData(prev => ({\r\n    ...prev,\r\n    [name]:\r\n      type === 'checkbox'\r\n        ? checked\r\n        : name === 'test_size'\r\n          ? parseFloat(value)\r\n          : value\r\n  }));\r\n};\r\n\r\n\r\n  // Handle feature selection\r\n  const handleFeatureSelect = (selectedOptions) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      features: selectedOptions.map(opt => opt.value)\r\n    }));\r\n  };\r\n\r\n  // Handle target column selection\r\n  const handleTargetSelect = (e) => {\r\n    const target = e.target.value;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      target_column: target\r\n    }));\r\n    \r\n    // Determine target type based on column type\r\n    if (columnTypes[target] === 'numeric') {\r\n      setTargetType('regression');\r\n    } else if (columnTypes[target] === 'categorical') {\r\n      setTargetType('classification');\r\n    } else if (columnTypes[target] === 'numeric-categorical') {\r\n      setTargetType('both');\r\n    }\r\n    \r\n    // Reset model type when target changes\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      model_type: '',\r\n      parameters: {},\r\n    }));\r\n  };\r\n\r\n  // Handle model parameter changes\r\n  const handleParameterChange = (paramName, value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      parameters: {\r\n        ...prev.parameters,\r\n        [paramName]: value === '' ? null : value\r\n      }\r\n    }));\r\n  };\r\n\r\n\r\n  // When model type changes, reset parameters\r\n  useEffect(() => {\r\n    if (formData.model_type && targetType) {\r\n      let paramsConfig = {};\r\n      \r\n      if (targetType === 'classification' && modelOptions.classification[formData.model_type]) {\r\n        paramsConfig = modelOptions.classification[formData.model_type].parameters;\r\n      } else if (targetType === 'regression' && modelOptions.regression[formData.model_type]) {\r\n        paramsConfig = modelOptions.regression[formData.model_type].parameters;\r\n      } else if (targetType === 'both') {\r\n        // For columns that could be either, use the selected model type\r\n        if (modelOptions.classification[formData.model_type]) {\r\n          paramsConfig = modelOptions.classification[formData.model_type].parameters;\r\n        } else if (modelOptions.regression[formData.model_type]) {\r\n          paramsConfig = modelOptions.regression[formData.model_type].parameters;\r\n        }\r\n      }\r\n      \r\n      const initialParams = {};\r\n      Object.entries(paramsConfig).forEach(([key, config]) => {\r\n        initialParams[key] = config.value;\r\n      });\r\n\r\n      \r\n      setFormData(prev => ({\r\n        ...prev,\r\n        parameters: initialParams,\r\n      }));\r\n    }\r\n  }, [formData.model_type, targetType]);\r\n\r\n  // Get appropriate models based on target type\r\n  const getModelOptions = () => {\r\n    if (!targetType) return [];\r\n    \r\n    if (targetType === 'classification') {\r\n      return Object.entries(modelOptions.classification).map(([key, config]) => ({\r\n        value: key,\r\n        label: config.displayName\r\n      }));\r\n    } else if (targetType === 'regression') {\r\n      return Object.entries(modelOptions.regression).map(([key, config]) => ({\r\n        value: key,\r\n        label: config.displayName\r\n      }));\r\n    } else if (targetType === 'both') {\r\n      // Combine both classification and regression models\r\n      const classificationModels = Object.entries(modelOptions.classification).map(([key, config]) => ({\r\n        value: key,\r\n        label: `${config.displayName} (Classification)`\r\n      }));\r\n      \r\n      const regressionModels = Object.entries(modelOptions.regression).map(([key, config]) => ({\r\n        value: key,\r\n        label: `${config.displayName} (Regression)`\r\n      }));\r\n      \r\n      return [...classificationModels, ...regressionModels];\r\n    }\r\n    \r\n    return [];\r\n  };\r\n\r\n  // Get current model parameters config\r\n  const getCurrentModelParameters = () => {\r\n    if (!formData.model_type || !targetType) return {};\r\n    \r\n    if (targetType === 'classification') {\r\n      return modelOptions.classification[formData.model_type]?.parameters || {};\r\n    } else if (targetType === 'regression') {\r\n      return modelOptions.regression[formData.model_type]?.parameters || {};\r\n    } else if (targetType === 'both') {\r\n      // Check both classification and regression models\r\n      return modelOptions.classification[formData.model_type]?.parameters || \r\n             modelOptions.regression[formData.model_type]?.parameters || {};\r\n    }\r\n    \r\n    return {};\r\n  };\r\n\r\nconst handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n  setIsLoading(true);\r\n  // Reset all relevant states\r\n  setError(null);\r\n  setResults(null);\r\n  setAccuracyScore({});\r\n  setFeatureImportance(null);\r\n  setConfusionMatrix(null);\r\n\r\n  try {\r\n    const formDataToSend = new FormData();\r\n    formDataToSend.append('dataset', dataset);\r\n    formDataToSend.append('name', fileDisplayName);\r\n    \r\n    const config = {\r\n      ...formData,\r\n      problem_type: targetType === 'both' ? \r\n        (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n        targetType\r\n    };\r\n    formDataToSend.append('config', JSON.stringify(config));\r\n\r\n    const response = await axios.post(`${API_URL}/file/train/`, formDataToSend, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        'Authorization': `Bearer ${accessToken}`,\r\n      }\r\n    });\r\n\r\n    console.log('Training results:', response.data);\r\n\r\n    // Set complete results first\r\n    setResults(response.data);\r\n\r\n    // Determine model type\r\n    const isRegression = response.data.config?.problem_type === 'regression' || \r\n                        formData.model_type in modelOptions.regression;\r\n\r\n    // Handle accuracy metrics with proper null checks\r\n    const accuracyData = response.data.accuracy || {};\r\n    setAccuracyScore({\r\n      accuracy: isRegression ? \r\n        (accuracyData.r2_score || 0) : \r\n        (accuracyData.accuracy_score || 0),\r\n      isRegression,\r\n      mse: accuracyData.mean_squared_error,\r\n      mae: accuracyData.mean_absolute_error,\r\n      rmse: accuracyData.root_mean_squared_error,\r\n      precision: accuracyData.precision,\r\n      recall: accuracyData.recall,\r\n      f1: accuracyData.f1_score\r\n    });\r\n\r\n    // Only set feature importance if values exist and aren't all zeros\r\n    if (accuracyData.feature_importance?.values?.some(v => v !== 0)) {\r\n      setFeatureImportance({\r\n        labels: accuracyData.feature_importance.labels || response.data.config?.features || [],\r\n        values: accuracyData.feature_importance.values\r\n      });\r\n    }\r\n\r\n    // Handle confusion matrix if exists\r\n    if (!isRegression && response.data.confusion_matrix) {\r\n      setConfusionMatrix({\r\n        matrix: response.data.confusion_matrix.matrix,\r\n        labels: response.data.confusion_matrix.labels\r\n      });\r\n    }\r\n\r\n  } catch (err) {\r\n    console.error('Training error:', err);\r\n    setError(err.response?.data?.error || \r\n            err.response?.data?.details || \r\n            err.response?.data?.message || \r\n            err.message || \r\n            'Error training model');\r\n  } finally {\r\n    setIsLoading(false);\r\n  }\r\n};\r\n\r\n  // Save trained model\r\nconst handleSaveModel = async () => {\r\n  try {\r\n    // Prepare the config object with all required fields\r\n    const saveConfig = {\r\n      ...formData,\r\n      accuracy: results.accuracy, // Make sure to include accuracy\r\n      problem_type: targetType === 'both' ? \r\n        (formData.model_type in modelOptions.classification ? 'classification' : 'regression') : \r\n        targetType\r\n    };\r\n\r\n    const payload = {\r\n      name: results.name,\r\n      model_cache_key: results.model_cache_key,\r\n      encoder_cache_key: results.encoder_cache_key,\r\n      scaler_cache_key: results.scaler_cache_key,\r\n      target_encoder_cache_key: results.target_encoder_cache_key,\r\n      dataset: results.dataset,\r\n      config: JSON.stringify(saveConfig) // Stringify the config object\r\n    };\r\n\r\n    const response = await axios.post(`${API_URL}/file/save/`, payload, {\r\n      headers: {\r\n        'Content-Type': 'application/json', // Correct content type\r\n        'Authorization': `Bearer ${accessToken}`,\r\n      }\r\n    });\r\n\r\n    // alert('Model saved successfully!');\r\n    navigate('/models');\r\n    toast.success('Model saved successfully');\r\n    return response.data;\r\n\r\n  } catch (err) {\r\n    console.error('Save error:', err.response?.data);\r\n    setError(err.response?.data?.error || err.message || 'Error saving model');\r\n    toast.error(err.response?.data?.error || 'Error saving model');\r\n    throw err;\r\n  }\r\n};\r\n\r\n  // Column options for feature selection\r\n  const featureOptions = columns.map(col => ({\r\n    value: col,\r\n    label: col,\r\n    isDisabled: col === formData.target_column\r\n  }));\r\n\r\n  // Filter columns based on visualization type\r\n  const getFilteredColumns = () => {\r\n    switch (showVisualization) {\r\n      case 'histogram':\r\n        return columns.filter(col => columnTypes[col] === 'numeric');\r\n      case 'pie':\r\n        return columns.filter(col => columnTypes[col] === 'categorical' || columnTypes[col] === 'numeric-categorical');\r\n      default:\r\n        return columns;\r\n    }\r\n  };\r\n\r\n  // Render the appropriate chart\r\n  const renderVisualization = () => {\r\n    if (!showVisualization) return null;\r\n\r\n    if (showVisualization === 'heatmap') {\r\n      if (!correlationMatrix || !chartData) {\r\n        return <div className=\"text-center py-8 text-gray-500\">Loading heatmap data or no numeric columns available</div>;\r\n      }\r\n    } else if (showVisualization !== 'preview' && showVisualization !== 'stats' && !chartData) {\r\n      return <div className=\"text-center py-8 text-gray-500\">Select a valid column for this visualization</div>;\r\n    }\r\n\r\n    const commonOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        title: {\r\n          display: true,\r\n          text: showVisualization === 'heatmap' ? 'Correlation Heatmap' : \r\n                selectedColumn2 ? `${selectedColumn} vs ${selectedColumn2}` : \r\n                `${selectedColumn} ${showVisualization.charAt(0).toUpperCase() + showVisualization.slice(1)}`,\r\n          font: { size: 16 }\r\n        },\r\n        legend: {\r\n          position: 'top',\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: function(context) {\r\n              let label = context.dataset.label || '';\r\n              if (label) {\r\n                label += ': ';\r\n              }\r\n              if (context.parsed.y !== undefined) {\r\n                label += context.parsed.y.toFixed(4);\r\n              } else if (context.parsed !== undefined) {\r\n                label += context.parsed.toFixed(4);\r\n              }\r\n              return label;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    switch (showVisualization) {\r\n      case 'histogram':\r\n        return (\r\n          <div className=\"h-96\">\r\n            <Bar\r\n              data={chartData}\r\n              options={{\r\n                ...commonOptions,\r\n                scales: { y: { beginAtZero: true } }\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'bar':\r\n        return (\r\n          <div className=\"h-96\">\r\n            <Bar\r\n              data={chartData}\r\n              options={{\r\n                ...commonOptions,\r\n                scales: { y: { beginAtZero: true } }\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'scatter':\r\n        return (\r\n          <div className=\"h-96\">\r\n            <Scatter\r\n              data={chartData}\r\n              options={{\r\n                ...commonOptions,\r\n                scales: {\r\n                  x: { \r\n                    title: { display: true, text: selectedColumn2 ? selectedColumn : 'Index' },\r\n                    beginAtZero: false \r\n                  },\r\n                  y: { \r\n                    title: { display: true, text: selectedColumn2 ? selectedColumn2 : selectedColumn },\r\n                    beginAtZero: false \r\n                  }\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'pie':\r\n        return (\r\n          <div className=\"h-96\">\r\n            <Pie\r\n              data={chartData}\r\n              options={commonOptions}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'line':\r\n        return (\r\n          <div className=\"h-96\">\r\n            <Line\r\n              data={chartData}\r\n              options={{\r\n                ...commonOptions,\r\n                scales: {\r\n                  y: { beginAtZero: false }\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n\r\n        case 'heatmap':\r\n          if (!chartData || !chartData.xLabels || !chartData.yLabels || !chartData.data) {\r\n            return (\r\n              <div className=\"h-96 flex items-center justify-center\">\r\n                {isLoadingPreview ? (\r\n                  <div className=\"text-gray-500\">Loading correlation data...</div>\r\n                ) : (\r\n                  <div className=\"text-gray-500\">No correlation data available</div>\r\n                )}\r\n              </div>\r\n            );\r\n          }\r\n\r\n          return (\r\n            <div className=\"h-96 overflow-auto\">\r\n              <div className=\"min-w-full\" style={{ width: `${Math.max(chartData.xLabels.length * 50, 300)}px` }}>\r\n                <Heatmap\r\n                  xLabels={chartData.xLabels}\r\n                  yLabels={chartData.yLabels}\r\n                  data={chartData.data}\r\n                  xLabelWidth={100}\r\n                  yLabelWidth={100}\r\n                  squares\r\n                  height={30}\r\n                  onClick={(x, y) => {\r\n                    if (chartData.data[y] && chartData.data[y][x] !== undefined) {\r\n                      alert(`Correlation between ${chartData.xLabels[x]} and ${chartData.yLabels[y]}: ${chartData.data[y][x].toFixed(2)}`);\r\n                    }\r\n                  }}\r\n                  cellStyle={(background, value, min, max, data, x, y) => ({\r\n                    background: `rgb(79, 70, 229, ${1 - (max - value) / (max - min)})`,\r\n                    fontSize: \"11px\",\r\n                    color: \"#444\"\r\n                  })}\r\n                  cellRender={(value) => value?.toFixed(2) ?? ''}\r\n                />\r\n              </div>\r\n            </div>\r\n          );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-[var(--color-primary-50)] to-[var(--color-gray-50)]\">\r\n      <Navbar />\r\n      \r\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\r\n        <div className=\"max-w-6xl mx-auto\">\r\n          <h1 className=\"text-3xl font-bold text-[var(--color-gray-900)] mb-2\">Advanced ML Playground</h1>\r\n          <p className=\"text-[var(--color-gray-600)] mb-6\">Upload your dataset and configure the machine learning pipeline with advanced options</p>\r\n          \r\n          {/* File Upload Section */}\r\n          <div className=\"bg-white rounded-xl shadow-md p-6 mb-8 border border-[var(--color-gray-200)]\">\r\n            <h2 className=\"text-xl font-semibold text-[var(--color-gray-900)] mb-4 flex items-center\">\r\n              <span className=\"bg-[var(--color-primary-100)] text-[var(--color-primary-800)] rounded-full w-6 h-6 flex items-center justify-center mr-2 text-sm\">1</span>\r\n              Upload Dataset\r\n            </h2>\r\n            \r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex flex-col space-y-2\">\r\n                <label className=\"block text-sm font-medium text-[var(--color-gray-700)] mb-1\">\r\n                  Dataset Name\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={fileDisplayName}\r\n                  onChange={(e) => setFileDisplayName(e.target.value)}\r\n                  className=\"block w-full pl-3 pr-3 py-2 border border-[var(--color-gray-300)] focus:outline-none focus:ring-[var(--color-primary-500)] focus:border-[var(--color-primary-500)] sm:text-sm rounded-md\"\r\n                  placeholder=\"Enter a name for your dataset\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"flex items-center justify-center w-full\">\r\n                <label className={`flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-lg cursor-pointer \r\n                  ${dataset ? 'border-[var(--color-primary-300)] bg-[var(--color-primary-50)]' : 'border-[var(--color-gray-300)] hover:border-[var(--color-primary-300)]'}`}>\r\n                  <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\r\n                    <DocumentTextIcon className={`w-8 h-8 mb-3 ${dataset ? 'text-[var(--color-primary-600)]' : 'text-[var(--color-gray-400)]'}`} />\r\n                    <p className={`mb-2 text-sm ${dataset ? 'text-[var(--color-primary-600)]' : 'text-[var(--color-gray-500)]'}`}>\r\n                      <span className=\"font-semibold\">Click to upload</span> or drag and drop\r\n                    </p>\r\n                    <p className=\"text-xs text-[var(--color-gray-500)]\">CSV or Excel files</p>\r\n                  </div>\r\n                  <input \r\n                    type=\"file\" \r\n                    accept=\".csv,.xlsx,.xls\" \r\n                    onChange={handleDatasetUpload} \r\n                    className=\"hidden\" \r\n                  />\r\n                </label>\r\n              </div>\r\n              \r\n              {dataset && (\r\n                <div className=\"flex items-center justify-between p-3 bg-[var(--color-primary-50)] rounded-lg\">\r\n                  <div className=\"flex items-center\">\r\n                    <DocumentTextIcon className=\"w-5 h-5 text-[var(--color-primary-600)] mr-2\" />\r\n                    <span className=\"text-sm font-medium text-[var(--color-gray-700)] truncate max-w-xs\">{fileName}</span>\r\n                  </div>\r\n                  <button \r\n                    onClick={removeDataset}\r\n                    className=\"text-[var(--color-gray-400)] hover:text-[var(--color-gray-600)]\"\r\n                  >\r\n                    <XMarkIcon className=\"w-5 h-5\" />\r\n                  </button>\r\n                </div>\r\n              )}\r\n              \r\n              {dataset && (\r\n                <div>\r\n                  <div className=\"flex justify-between items-center mb-2\">\r\n                    <h3 className=\"text-sm font-medium text-gray-700\">Data Visualization</h3>\r\n                    <div className=\"flex space-x-2\">\r\n                      {visualizationOptions.map(option => (\r\n                        <button\r\n                          key={option.value}\r\n                          onClick={() => setShowVisualization(option.value)}\r\n                          className={`flex items-center px-3 py-1 text-xs rounded-md ${\r\n                            showVisualization === option.value \r\n                              ? 'bg-primary-100 text-primary-800' \r\n                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                          }`}\r\n                        >\r\n                          {option.icon}\r\n                          {option.label}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {showVisualization !== 'preview' && showVisualization !== 'stats' && (\r\n                    <div className=\"mb-4\">\r\n                      <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\r\n                        {showVisualization === 'heatmap' ? 'Heatmap will show all numeric columns' : \r\n                         `Select ${['bar', 'scatter', 'line'].includes(showVisualization) ? '1 or 2' : '1'} column(s) for ${showVisualization}:`}\r\n                      </h4>\r\n                      \r\n                      <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 mb-4\">\r\n                        {getFilteredColumns().map(col => (\r\n                          <button\r\n                            key={col}\r\n                            onClick={() => handleColumnSelect(col)}\r\n                            className={`px-3 py-1 text-xs rounded-md ${\r\n                              selectedColumn === col\r\n                                ? 'bg-primary-600 text-white'\r\n                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                            }`}\r\n                          >\r\n                            {col}\r\n                          </button>\r\n                        ))}\r\n                      </div>\r\n                      \r\n                      {['bar', 'scatter', 'line'].includes(showVisualization) && selectedColumn && (\r\n                        <div className=\"mt-2\">\r\n                          <h5 className=\"text-xs font-medium text-gray-600 mb-1\">Select second column (optional):</h5>\r\n                          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2\">\r\n                            {getFilteredColumns().filter(col => col !== selectedColumn).map(col => (\r\n                              <button\r\n                                key={col}\r\n                                onClick={() => handleColumn2Select(col)}\r\n                                className={`px-3 py-1 text-xs rounded-md ${\r\n                                  selectedColumn2 === col\r\n                                    ? 'bg-primary-600 text-white'\r\n                                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                                }`}\r\n                              >\r\n                                {col}\r\n                              </button>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                      \r\n                      <div className=\"bg-gray-50 p-4 rounded-lg border border-gray-200\">\r\n                        {renderVisualization()}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {showVisualization === 'preview' && (\r\n                    <div className=\"mb-4\">\r\n                      <div className=\"flex justify-between items-center mb-2\">\r\n                        <h3 className=\"text-sm font-medium text-gray-700\">Data Preview</h3>\r\n                        <Select\r\n                          options={rowCountOptions}\r\n                          value={rowCountOptions.find(opt => opt.value === previewRowCount)}\r\n                          onChange={handleRowCountChange}\r\n                          className=\"w-32\"\r\n                          classNamePrefix=\"select\"\r\n                          isSearchable={false}\r\n                        />\r\n                      </div>\r\n                      \r\n                      <div className=\"overflow-x-auto border border-[var(--color-gray-200)] rounded-lg max-h-96\">\r\n                        <table className=\"min-w-full divide-y divide-[var(--color-gray-200)]\">\r\n                          <thead className=\"bg-[var(--color-gray-50)] sticky top-0\">\r\n                            <tr>\r\n                              {columns.map((col) => (\r\n                                <th key={col} className=\"px-4 py-3 text-left text-xs font-medium text-[var(--color-gray-700)] uppercase tracking-wider\">\r\n                                  {col}\r\n                                  <span className=\"block text-xs font-normal text-[var(--color-gray-500)] mt-1\">\r\n                                    {columnTypes[col] === 'numeric' ? 'Numeric' : \r\n                                     columnTypes[col] === 'categorical' ? 'Categorical' : \r\n                                     columnTypes[col] === 'numeric-categorical' ? 'Numeric-Categorical' : ''}\r\n                                  </span>\r\n                                </th>\r\n                              ))}\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody className=\"bg-white divide-y divide-[var(--color-gray-200)]\">\r\n                            {isLoadingPreview ? (\r\n                              <tr>\r\n                                <td colSpan={columns.length} className=\"px-4 py-4 text-center text-sm text-gray-500\">\r\n                                  Loading preview data...\r\n                                </td>\r\n                              </tr>\r\n                            ) : previewData.length > 0 ? (\r\n                              previewData.map((row, i) => (\r\n                                <tr key={i}>\r\n                                  {columns.map((col) => (\r\n                                    <td key={`${i}-${col}`} className=\"px-4 py-2 whitespace-nowrap text-sm text-[var(--color-gray-500)] max-w-xs truncate\">\r\n                                      {row[col]}\r\n                                    </td>\r\n                                  ))}\r\n                                </tr>\r\n                              ))\r\n                            ) : (\r\n                              <tr>\r\n                                <td colSpan={columns.length} className=\"px-4 py-4 text-center text-sm text-gray-500\">\r\n                                  No data available\r\n                                </td>\r\n                              </tr>\r\n                            )}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  {showVisualization === 'stats' && (\r\n                    <div className=\"mb-4 bg-[var(--color-gray-50)] p-4 rounded-lg border border-[var(--color-gray-200)] overflow-x-auto\">\r\n                      <h4 className=\"text-sm font-medium text-[var(--color-gray-700)] mb-2\">Dataset Statistics</h4>\r\n                      {isLoadingStats ? (\r\n                        <div className=\"text-center py-4 text-sm text-gray-500\">Loading statistics...</div>\r\n                      ) : datasetStats && Object.keys(datasetStats).length > 0 ? (\r\n                        <>\r\n                          <div className=\"grid grid-cols-2 gap-4 mb-2\">\r\n                            <div className=\"bg-white p-2 rounded border border-[var(--color-gray-200)]\">\r\n                              <p className=\"text-xs text-[var(--color-gray-500)]\">Rows</p>\r\n                              <p className=\"font-medium\">\r\n                                {/* Get count from first available property */}\r\n                                {Object.values(datasetStats)[0]?.[0] ?? 'N/A'}\r\n                              </p>\r\n                            </div>\r\n                            <div className=\"bg-white p-2 rounded border border-[var(--color-gray-200)]\">\r\n                              <p className=\"text-xs text-[var(--color-gray-500)]\">Columns</p>\r\n                              <p className=\"font-medium\">{Object.keys(datasetStats).length}</p>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <table className=\"min-w-full divide-y divide-[var(--color-gray-200)]\">\r\n                            <thead className=\"bg-[var(--color-gray-100)]\">\r\n                              <tr>\r\n                                <th className=\"px-4 py-2 text-left text-xs font-medium text-[var(--color-gray-700)] uppercase tracking-wider\">Statistic</th>\r\n                                {Object.keys(datasetStats).map(col => (\r\n                                  <th key={col} className=\"px-4 py-2 text-left text-xs font-medium text-[var(--color-gray-700)] uppercase tracking-wider\">\r\n                                    {col}\r\n                                  </th>\r\n                                ))}\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody className=\"bg-white divide-y divide-[var(--color-gray-200)]\">\r\n                              {[\r\n                                { name: \"Count\", index: 0 },\r\n                                { name: \"Mean\", index: 1 },\r\n                                { name: \"Std Dev\", index: 2 },\r\n                                { name: \"Min\", index: 3 },\r\n                                { name: \"25%\", index: 4 },\r\n                                { name: \"Median\", index: 5 },\r\n                                { name: \"75%\", index: 6 },\r\n                                { name: \"Max\", index: 7 }\r\n                              ].map(({ name, index }) => (\r\n                                <tr key={name}>\r\n                                  <td className=\"px-4 py-2 whitespace-nowrap text-sm font-medium text-[var(--color-gray-700)]\">{name}</td>\r\n                                  {Object.entries(datasetStats).map(([col, values]) => (\r\n                                    <td key={`${name}-${col}`} className=\"px-4 py-2 whitespace-nowrap text-sm text-[var(--color-gray-500)]\">\r\n                                      {values?.[index] !== undefined ? (\r\n                                        typeof values[index] === 'number' ? (\r\n                                          Number.isInteger(values[index]) ? \r\n                                            values[index].toLocaleString() :\r\n                                            values[index].toFixed(4)\r\n                                        ) : values[index]\r\n                                      ) : '-'}\r\n                                    </td>\r\n                                  ))}\r\n                                </tr>\r\n                              ))}\r\n                            </tbody>\r\n                          </table>\r\n                        </>\r\n                      ) : (\r\n                        <div className=\"text-center py-4 text-sm text-gray-500\">\r\n                          {datasetStats ? \"No statistics available\" : \"Upload data to see statistics\"}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Model Configuration Form */}\r\n          {columns.length > 0 && (\r\n            <div className=\"bg-white rounded-xl shadow-md p-6 mb-8 border border-[var(--color-gray-200)]\">\r\n              <h2 className=\"text-xl font-semibold text-[var(--color-gray-900)] mb-4 flex items-center\">\r\n                <span className=\"bg-[var(--color-primary-100)] text-[var(--color-primary-800)] rounded-full w-6 h-6 flex items-center justify-center mr-2 text-sm\">2</span>\r\n                Configure Model\r\n              </h2>\r\n              \r\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n                {/* Features and Target Selection */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-[var(--color-gray-700)] mb-1\">\r\n                      Features (Select multiple)\r\n                    </label>\r\n                    <Select\r\n                      isMulti\r\n                      options={featureOptions}\r\n                      value={featureOptions.filter(opt => formData.features.includes(opt.value))}\r\n                      onChange={handleFeatureSelect}\r\n                      className=\"basic-multi-select\"\r\n                      classNamePrefix=\"select\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-[var(--color-gray-700)] mb-1\">\r\n                      Target Column\r\n                    </label>\r\n                    <select\r\n                      name=\"target_column\"\r\n                      value={formData.target_column}\r\n                      onChange={handleTargetSelect}\r\n                      className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border border-[var(--color-gray-300)] focus:outline-none focus:ring-[var(--color-primary-500)] focus:border-[var(--color-primary-500)] sm:text-sm rounded-md\"\r\n                      required\r\n                    >\r\n                      <option value=\"\">Select target column</option>\r\n                      {columns.map((col) => (\r\n                        <option key={col} value={col}>\r\n                          {col} ({columnTypes[col] === 'numeric' ? 'Numeric' : \r\n                                 columnTypes[col] === 'categorical' ? 'Categorical' : \r\n                                 columnTypes[col] === 'numeric-categorical' ? 'Numeric-Categorical' : ''})\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {targetType && (\r\n                      <p className=\"mt-1 text-xs text-[var(--color-gray-500)]\">\r\n                        Problem type: {targetType === 'both' ? 'Classification or Regression' : targetType}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Divider */}\r\n                <div className=\"border-t border-[var(--color-gray-200)] my-4\"></div>\r\n                \r\n                {/* Preprocessing Options */}\r\n                <h3 className=\"text-sm font-medium text-[var(--color-gray-700)] mb-2\">Data Preprocessing</h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-[var(--color-gray-700)] mb-1\">\r\n                      Encoder\r\n                    </label>\r\n                    <select\r\n                      name=\"encoder\"\r\n                      value={formData.encoder}\r\n                      onChange={handleChange}\r\n                      className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border border-[var(--color-gray-300)] focus:outline-none focus:ring-[var(--color-primary-500)] focus:border-[var(--color-primary-500)] sm:text-sm rounded-md\"\r\n                    >\r\n                      <option value=\"LabelEncoder\">Label Encoder</option>\r\n                      <option value=\"OneHotEncoder\">One Hot Encoder</option>\r\n                      <option value=\"OrdinalEncoder\">Ordinal Encoder</option>\r\n                      <option value=\"None\">None</option>\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-[var(--color-gray-700)] mb-1\">\r\n                      Scaler\r\n                    </label>\r\n                    <select\r\n                      name=\"scaler\"\r\n                      value={formData.scaler}\r\n                      onChange={handleChange}\r\n                      className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border border-[var(--color-gray-300)] focus:outline-none focus:ring-[var(--color-primary-500)] focus:border-[var(--color-primary-500)] sm:text-sm rounded-md\"\r\n                    >\r\n                      <option value=\"StandardScaler\">Standard Scaler</option>\r\n                      <option value=\"MinMaxScaler\">MinMax Scaler</option>\r\n                      <option value=\"RobustScaler\">Robust Scaler</option>\r\n                      <option value=\"None\">None</option>\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-[var(--color-gray-700)] mb-1\">\r\n                      Test Size\r\n                    </label>\r\n                    <div className=\"flex items-center\">\r\n                      <input\r\n                        type=\"range\"\r\n                        name=\"test_size\"\r\n                        min=\"0.1\"\r\n                        max=\"0.5\"\r\n                        step=\"0.05\"\r\n                        value={formData.test_size}\r\n                        onChange={handleChange}\r\n                        className=\"w-full h-2 bg-[var(--color-gray-200)] rounded-lg appearance-none cursor-pointer\"\r\n                      />\r\n                      <span className=\"ml-3 text-sm text-[var(--color-gray-700)] w-10\">\r\n                        {formData.test_size}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Random State and Stratify */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-[var(--color-gray-700)] mb-1\">\r\n                      Random State\r\n                    </label>\r\n                    <input\r\n                      type=\"number\"\r\n                      name=\"random_state\"\r\n                      value={formData.random_state}\r\n                      onChange={handleChange}\r\n                      className=\"block w-full pl-3 pr-3 py-2 border border-[var(--color-gray-300)] focus:outline-none focus:ring-[var(--color-primary-500)] focus:border-[var(--color-primary-500)] sm:text-sm rounded-md\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  {(targetType === 'classification' || targetType === 'both') && (\r\n                    <div className=\"flex items-end\">\r\n                      <div className=\"flex items-center h-10\">\r\n                        <input\r\n                          id=\"stratify\"\r\n                          name=\"stratify\"\r\n                          type=\"checkbox\"\r\n                          checked={formData.stratify}\r\n                          onChange={handleChange}\r\n                          className=\"h-4 w-4 text-[var(--color-primary-600)] focus:ring-[var(--color-primary-500)] border-[var(--color-gray-300)] rounded\"\r\n                        />\r\n                        <label htmlFor=\"stratify\" className=\"ml-2 block text-sm text-[var(--color-gray-700)]\">\r\n                          Stratify Split (for classification)\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                {/* Divider */}\r\n                <div className=\"border-t border-[var(--color-gray-200)] my-4\"></div>\r\n                \r\n                {/* Model Selection */}\r\n                {formData.target_column && (\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-[var(--color-gray-700)] mb-1\">\r\n                      Model Type\r\n                    </label>\r\n                    <select\r\n                      name=\"model_type\"\r\n                      value={formData.model_type}\r\n                      onChange={handleChange}\r\n                      className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border border-[var(--color-gray-300)] focus:outline-none focus:ring-[var(--color-primary-500)] focus:border-[var(--color-primary-500)] sm:text-sm rounded-md\"\r\n                      required\r\n                    >\r\n                      <option value=\"\">Select a model</option>\r\n                      {getModelOptions().map(option => (\r\n                        <option key={option.value} value={option.value}>{option.label}</option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Model Parameters */}\r\n                {formData.model_type && (\r\n                  <div className=\"bg-[var(--color-gray-50)] p-4 rounded-lg border border-[var(--color-gray-200)]\">\r\n                    <h3 className=\"text-sm font-medium text-[var(--color-gray-700)] mb-3\">Model Parameters</h3>\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                      {Object.entries(getCurrentModelParameters()).map(([param, config]) => (\r\n                        <div key={param}>\r\n                          <label className=\"block text-xs font-medium text-[var(--color-gray-600)] mb-1 capitalize\">\r\n                            {param.replace(/_/g, ' ')}\r\n                          </label>\r\n                          {config.type === 'number' ? (\r\n                            <input\r\n                              type=\"number\"\r\n                              value={formData.parameters[param] ?? config.value}\r\n                              onChange={(e) => handleParameterChange(param, e.target.value)}\r\n                              min={config.min}\r\n                              max={config.max}\r\n                              step={config.step || 1}\r\n                              placeholder={config.placeholder}\r\n                              className=\"block w-full pl-3 pr-3 py-2 text-sm border border-[var(--color-gray-300)] focus:outline-none focus:ring-[var(--color-primary-500)] focus:border-[var(--color-primary-500)] rounded-md\"\r\n                            />\r\n                          ) : config.type === 'select' ? (\r\n                            <select\r\n                              value={formData.parameters[param] ?? config.value}\r\n                              onChange={(e) => handleParameterChange(param, e.target.value)}\r\n                              className=\"block w-full pl-3 pr-10 py-2 text-sm border border-[var(--color-gray-300)] focus:outline-none focus:ring-[var(--color-primary-500)] focus:border-[var(--color-primary-500)] rounded-md\"\r\n                            >\r\n                              {config.options.map(option => (\r\n                                <option key={option} value={option}>{option}</option>\r\n                              ))}\r\n                            </select>\r\n                          ) : null}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Submit Button */}\r\n                <div className=\"pt-4\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={isLoading || !formData.target_column || formData.features.length === 0 || !formData.model_type}\r\n                    className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-[var(--color-primary-600)] to-[var(--color-accent-500)] hover:from-[var(--color-primary-700)] hover:to-[var(--color-accent-600)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--color-primary-500)] transition ${\r\n                      isLoading || !formData.target_column || formData.features.length === 0 || !formData.model_type ? 'opacity-50 cursor-not-allowed' : ''\r\n                    }`}\r\n                  >\r\n                    {isLoading ? (\r\n                      <>\r\n                        <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                        </svg>\r\n                        Training Model...\r\n                      </>\r\n                    ) : 'Train Model'}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Results Section */}\r\n          {results && (\r\n            <div className=\"bg-white rounded-xl shadow-md p-6 border border-[var(--color-gray-200)]\">\r\n              <h2 className=\"text-xl font-semibold text-[var(--color-gray-900)] mb-4 flex items-center\">\r\n                <span className=\"bg-[var(--color-primary-100)] text-[var(--color-primary-800)] rounded-full w-6 h-6 flex items-center justify-center mr-2 text-sm\">3</span>\r\n                Results\r\n              </h2>\r\n              \r\n              {error && (\r\n                <div className=\"bg-red-50 border-l-4 border-red-400 p-4 mb-6 rounded\">\r\n                  <div className=\"flex\">\r\n                    <div className=\"flex-shrink-0\">\r\n                      <svg className=\"h-5 w-5 text-red-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                    </div>\r\n                    <div className=\"ml-3\">\r\n                      <p className=\"text-sm text-red-700\">{error}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"w-full m-2\">\r\n                <div className=\"bg-gradient-to-r from-[var(--color-primary-50)] to-[var(--color-primary-100)] p-4 rounded-lg border border-[var(--color-primary-200)]\">\r\n                  <h3 className=\"text-sm font-medium text-[var(--color-primary-800)] mb-2\">\r\n                    {accuracyScore.isRegression ? 'R² Score' : 'Accuracy Score'}\r\n                  </h3>\r\n                  <p className=\"text-3xl font-bold text-[var(--color-primary-600)]\">\r\n                    {accuracyScore.isRegression ? \r\n                      accuracyScore.accuracy.toFixed(4) : \r\n                      (accuracyScore.accuracy * 100).toFixed(2) + '%'}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              \r\n                {/* Feature Importance - Only show if available */}\r\n                {featureImportance ? (\r\n                  <div className=\"mb-6\">\r\n                    <h3 className=\"text-sm font-medium text-[var(--color-gray-700)] mb-2\">Feature Importance</h3>\r\n                    <div className=\"bg-[var(--color-gray-50)] p-4 rounded-lg border border-[var(--color-gray-200)]\">\r\n                      <Bar\r\n                        data={{\r\n                          labels: featureImportance.labels,\r\n                          datasets: [{\r\n                            label: 'Feature Importance',\r\n                            data: featureImportance.values,\r\n                            backgroundColor: 'rgba(79, 70, 229, 0.7)',\r\n                            borderColor: 'rgba(79, 70, 229, 1)',\r\n                            borderWidth: 1\r\n                          }]\r\n                        }}\r\n                        options={{\r\n                          indexAxis: 'y',\r\n                          responsive: true,\r\n                          plugins: {\r\n                            legend: { display: false },\r\n                            tooltip: {\r\n                              callbacks: {\r\n                                label: (context) => context.parsed.x.toFixed(4)\r\n                              }\r\n                            }\r\n                          },\r\n                          scales: { x: { beginAtZero: true } }\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"mb-6 bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded\">\r\n                    <div className=\"flex\">\r\n                      <div className=\"flex-shrink-0\">\r\n                        <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-400\" />\r\n                      </div>\r\n                      <div className=\"ml-3\">\r\n                        <p className=\"text-sm text-yellow-700\">\r\n                          Feature importance not available for this model type.\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              \r\n              {confusionMatrix && (\r\n                <div className=\"mb-6\">\r\n                  <h3 className=\"text-sm font-medium text-[var(--color-gray-700)] mb-2\">Confusion Matrix</h3>\r\n                  <div className=\"bg-[var(--color-gray-50)] p-4 rounded-lg border border-[var(--color-gray-200)]\">\r\n                    <ConfusionMatrix \r\n                      matrix={confusionMatrix.matrix} \r\n                      labels={confusionMatrix.labels} \r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {(targetType !== 'regression' && !(targetType === 'both' && formData.model_type in modelOptions.regression)) && \r\n                results.classification_report && (\r\n                <div className=\"mb-6\">\r\n                  <h3 className=\"text-sm font-medium text-[var(--color-gray-700)] mb-2\">Classification Report</h3>\r\n                  <div className=\"bg-[var(--color-gray-50)] p-4 rounded-lg border border-[var(--color-gray-200)] overflow-x-auto\">\r\n                    <pre className=\"text-sm font-mono text-[var(--color-gray-700)]\">\r\n                      {results.classification_report}\r\n                    </pre>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {(targetType === 'regression' || (targetType === 'both' && formData.model_type in modelOptions.regression)) && \r\n                results.regression_metrics && (\r\n                <div className=\"mb-6\">\r\n                  <h3 className=\"text-sm font-medium text-[var(--color-gray-700)] mb-2\">Regression Metrics</h3>\r\n                  <div className=\"bg-[var(--color-gray-50)] p-4 rounded-lg border border-[var(--color-gray-200)] overflow-x-auto\">\r\n                    <pre className=\"text-sm font-mono text-[var(--color-gray-700)]\">\r\n                      {`Mean Absolute Error: ${results.regression_metrics.mae.toFixed(4)}\r\n                      Mean Squared Error: ${results.regression_metrics.mse.toFixed(4)}\r\n                      Root Mean Squared Error: ${results.regression_metrics.rmse.toFixed(4)}`}\r\n                    </pre>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"flex justify-end\">\r\n                <button\r\n                  onClick={handleSaveModel}\r\n                  className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-[var(--color-accent-500)] to-[var(--color-accent-600)] hover:from-[var(--color-accent-600)] hover:to-[var(--color-accent-700)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--color-accent-500)] transition\"\r\n                >\r\n                  Save Model\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </main>\r\n      \r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playground;"
        }
    ]
}